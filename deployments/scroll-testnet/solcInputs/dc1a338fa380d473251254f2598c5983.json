{
  "language": "Solidity",
  "sources": {
    "@canva-contracts/badge/extensions/ScrollBadgeAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Attestation} from \"@eas/contracts/IEAS.sol\";\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {ScrollBadge} from \"../ScrollBadge.sol\";\nimport {Unauthorized} from \"../../Errors.sol\";\n\n/// @title ScrollBadgeAccessControl\n/// @notice This contract adds access control to ScrollBadge.\n/// @dev In EAS, only the original attester can revoke an attestation. If the original\n//       attester was removed and a new was added in this contract, it will not be able\n//       to revoke previous attestations.\nabstract contract ScrollBadgeAccessControl is Ownable, ScrollBadge {\n    // Authorized badge issuer and revoker accounts.\n    mapping(address => bool) public isAttester;\n\n    /// @notice Enables or disables a given attester.\n    /// @param attester The attester address.\n    /// @param enable True if enable, false if disable.\n    function toggleAttester(address attester, bool enable) external onlyOwner {\n        isAttester[attester] = enable;\n    }\n\n    /// @inheritdoc ScrollBadge\n    function onIssueBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        if (!super.onIssueBadge(attestation)) {\n            return false;\n        }\n\n        // only allow authorized issuers\n        if (!isAttester[attestation.attester]) {\n            revert Unauthorized();\n        }\n\n        return true;\n    }\n\n    /// @inheritdoc ScrollBadge\n    function onRevokeBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        if (!super.onRevokeBadge(attestation)) {\n            return false;\n        }\n\n        // only allow authorized revokers\n        if (!isAttester[attestation.attester]) {\n            revert Unauthorized();\n        }\n\n        return true;\n    }\n}\n"
    },
    "@canva-contracts/badge/extensions/ScrollBadgeDefaultURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {ScrollBadge} from \"../ScrollBadge.sol\";\n\n/// @title ScrollBadgeDefaultURI\n/// @notice This contract sets a default badge URI.\nabstract contract ScrollBadgeDefaultURI is ScrollBadge {\n    string public defaultBadgeURI;\n\n    constructor(string memory _defaultBadgeURI) {\n        defaultBadgeURI = _defaultBadgeURI;\n    }\n\n    /// @inheritdoc ScrollBadge\n    function badgeTokenURI(bytes32 uid) public view override returns (string memory) {\n        if (uid == bytes32(0)) {\n            return defaultBadgeURI;\n        }\n\n        return getBadgeTokenURI(uid);\n    }\n\n    /// @notice Returns the token URI corresponding to a certain badge UID.\n    /// @param uid The badge UID.\n    /// @return The badge token URI (same format as ERC721).\n    function getBadgeTokenURI(bytes32 uid) internal view virtual returns (string memory);\n}\n"
    },
    "@canva-contracts/badge/extensions/ScrollBadgeEligibilityCheck.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {ScrollBadge} from \"../ScrollBadge.sol\";\n\n/// @title ScrollBadgeEligibilityCheck\n/// @notice This contract adds a standard on-chain eligibility check API.\nabstract contract ScrollBadgeEligibilityCheck is ScrollBadge {\n    /// @notice Check if user is eligible to mint this badge.\n    /// @param recipient The user's wallet address.\n    /// @return Whether the user is eligible to mint.\n    function isEligible(address recipient) external virtual returns (bool) {\n        return !hasBadge(recipient);\n    }\n}\n"
    },
    "@canva-contracts/badge/extensions/ScrollBadgeNoExpiry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Attestation} from \"@eas/contracts/IEAS.sol\";\nimport {NO_EXPIRATION_TIME} from \"@eas/contracts/Common.sol\";\n\nimport {ScrollBadge} from \"../ScrollBadge.sol\";\nimport {ExpirationDisabled} from \"../../Errors.sol\";\n\n/// @title ScrollBadgeNoExpiry\n/// @notice This contract disables expiration for this badge.\nabstract contract ScrollBadgeNoExpiry is ScrollBadge {\n    /// @inheritdoc ScrollBadge\n    function onIssueBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        if (!super.onIssueBadge(attestation)) {\n            return false;\n        }\n\n        if (attestation.expirationTime != NO_EXPIRATION_TIME) {\n            revert ExpirationDisabled();\n        }\n\n        return true;\n    }\n\n    /// @inheritdoc ScrollBadge\n    function onRevokeBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        return super.onRevokeBadge(attestation);\n    }\n}\n"
    },
    "@canva-contracts/badge/extensions/ScrollBadgeSelfAttest.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Attestation} from \"@eas/contracts/IEAS.sol\";\n\nimport {ScrollBadge} from \"../ScrollBadge.sol\";\nimport {Unauthorized} from \"../../Errors.sol\";\n\n/// @title ScrollBadgeSelfAttest\n/// @notice This contract ensures that only the badge recipient can attest.\nabstract contract ScrollBadgeSelfAttest is ScrollBadge {\n    /// @inheritdoc ScrollBadge\n    function onIssueBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        if (!super.onIssueBadge(attestation)) {\n            return false;\n        }\n\n        if (attestation.recipient != attestation.attester) {\n            revert Unauthorized();\n        }\n\n        return true;\n    }\n\n    /// @inheritdoc ScrollBadge\n    function onRevokeBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        return super.onRevokeBadge(attestation);\n    }\n}\n"
    },
    "@canva-contracts/badge/extensions/ScrollBadgeSingleton.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Attestation} from \"@eas/contracts/IEAS.sol\";\n\nimport {ScrollBadge} from \"../ScrollBadge.sol\";\nimport {SingletonBadge} from \"../../Errors.sol\";\n\n/// @title ScrollBadgeSingleton\n/// @notice This contract only allows one active badge per wallet.\nabstract contract ScrollBadgeSingleton is ScrollBadge {\n    /// @inheritdoc ScrollBadge\n    function onIssueBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        if (!super.onIssueBadge(attestation)) {\n            return false;\n        }\n\n        if (hasBadge(attestation.recipient)) {\n            revert SingletonBadge();\n        }\n\n        return true;\n    }\n\n    /// @inheritdoc ScrollBadge\n    function onRevokeBadge(Attestation calldata attestation) internal virtual override returns (bool) {\n        return super.onRevokeBadge(attestation);\n    }\n}\n"
    },
    "@canva-contracts/badge/ScrollBadge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Attestation} from \"@eas/contracts/IEAS.sol\";\n\nimport {decodeBadgeData} from \"../Common.sol\";\nimport {IScrollBadge} from \"../interfaces/IScrollBadge.sol\";\nimport {IScrollBadgeResolver} from \"../interfaces/IScrollBadgeResolver.sol\";\nimport {AttestationBadgeMismatch, Unauthorized} from \"../Errors.sol\";\n\n/// @title ScrollBadge\n/// @notice This contract implements the basic functionalities of a Scroll badge.\n///         It serves as the base contract for more complex badge functionalities.\nabstract contract ScrollBadge is IScrollBadge {\n    // The global Scroll badge resolver contract.\n    address public immutable resolver;\n\n    // wallet address => badge count\n    mapping(address => uint256) private _userBadgeCount;\n\n    /// @dev Creates a new ScrollBadge instance.\n    /// @param resolver_ The address of the global Scroll badge resolver contract.\n    constructor(address resolver_) {\n        resolver = resolver_;\n    }\n\n    /// @inheritdoc IScrollBadge\n    function issueBadge(Attestation calldata attestation) public returns (bool) {\n        // only callable from resolver\n        if (msg.sender != address(resolver)) {\n            revert Unauthorized();\n        }\n\n        // delegate logic to subcontract\n        if (!onIssueBadge(attestation)) {\n            return false;\n        }\n\n        _userBadgeCount[attestation.recipient] += 1;\n\n        emit IssueBadge(attestation.uid);\n        return true;\n    }\n\n    /// @inheritdoc IScrollBadge\n    function revokeBadge(Attestation calldata attestation) public returns (bool) {\n        // only callable from resolver\n        if (msg.sender != address(resolver)) {\n            revert Unauthorized();\n        }\n\n        // delegate logic to subcontract\n        if (!onRevokeBadge(attestation)) {\n            return false;\n        }\n\n        _userBadgeCount[attestation.recipient] -= 1;\n\n        emit RevokeBadge(attestation.uid);\n        return true;\n    }\n\n    /// @notice A resolver callback that should be implemented by child contracts.\n    /// @param {attestation} The new attestation.\n    /// @return Whether the attestation is valid.\n    function onIssueBadge(Attestation calldata /*attestation*/ ) internal virtual returns (bool) {\n        return true;\n    }\n\n    /// @notice A resolver callback that should be implemented by child contracts.\n    /// @param {attestation} The existing attestation to be revoked.\n    /// @return Whether the attestation can be revoked.\n    function onRevokeBadge(Attestation calldata /*attestation*/ ) internal virtual returns (bool) {\n        return true;\n    }\n\n    /// @inheritdoc IScrollBadge\n    function getAndValidateBadge(bytes32 uid) public view returns (Attestation memory) {\n        Attestation memory attestation = IScrollBadgeResolver(resolver).getAndValidateBadge(uid);\n\n        (address badge,) = decodeBadgeData(attestation.data);\n\n        if (badge != address(this)) {\n            revert AttestationBadgeMismatch(uid);\n        }\n\n        return attestation;\n    }\n\n    /// @inheritdoc IScrollBadge\n    function badgeTokenURI(bytes32 uid) public view virtual returns (string memory);\n\n    /// @inheritdoc IScrollBadge\n    function hasBadge(address user) public view returns (bool) {\n        return _userBadgeCount[user] > 0;\n    }\n}\n"
    },
    "@canva-contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nuint256 constant MAX_ATTACHED_BADGE_NUM = 48;\n\nstring constant SCROLL_BADGE_SCHEMA = \"address badge, bytes payload\";\n\nfunction decodeBadgeData(bytes memory data) pure returns (address, bytes memory) {\n    return abi.decode(data, (address, bytes));\n}\n"
    },
    "@canva-contracts/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nerror Unauthorized();\n\n// attestation errors\n// note: these don't include the uid since it is not known prior to the attestation.\nerror BadgeNotAllowed(address badge);\nerror BadgeNotFound(address badge);\nerror ExpirationDisabled();\nerror MissingPayload();\nerror ResolverPaymentsDisabled();\nerror RevocationDisabled();\nerror SingletonBadge();\nerror UnknownSchema();\n\n// query errors\nerror AttestationBadgeMismatch(bytes32 uid);\nerror AttestationExpired(bytes32 uid);\nerror AttestationNotFound(bytes32 uid);\nerror AttestationOwnerMismatch(bytes32 uid);\nerror AttestationRevoked(bytes32 uid);\nerror AttestationSchemaMismatch(bytes32 uid);\n\n// profile errors\nerror BadgeCountReached();\nerror LengthMismatch();\nerror TokenNotOwnedByUser(address token, uint256 tokenId);\n\n// profile registry errors\nerror CallerIsNotUserProfile();\nerror DuplicatedUsername();\nerror ExpiredSignature();\nerror ImplementationNotContract();\nerror InvalidReferrer();\nerror InvalidSignature();\nerror InvalidUsername();\nerror MsgValueMismatchWithMintFee();\nerror ProfileAlreadyMinted();\n"
    },
    "@canva-contracts/interfaces/IScrollBadge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Attestation} from \"@eas/contracts/IEAS.sol\";\n\ninterface IScrollBadge {\n    event IssueBadge(bytes32 indexed uid);\n    event RevokeBadge(bytes32 indexed uid);\n\n    /// @notice A resolver callback invoked in the `issueBadge` function in the parent contract.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation is valid.\n    function issueBadge(Attestation calldata attestation) external returns (bool);\n\n    /// @notice A resolver callback invoked in the `revokeBadge` function in the parent contract.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation can be revoked.\n    function revokeBadge(Attestation calldata attestation) external returns (bool);\n\n    /// @notice Validate and return a Scroll badge attestation.\n    /// @param uid The attestation UID.\n    /// @return The attestation.\n    function getAndValidateBadge(bytes32 uid) external view returns (Attestation memory);\n\n    /// @notice Returns the token URI corresponding to a certain badge UID, or the default\n    ///         badge token URI if the pass UID is 0x0.\n    /// @param uid The badge UID, or 0x0.\n    /// @return The badge token URI (same format as ERC721).\n    function badgeTokenURI(bytes32 uid) external view returns (string memory);\n\n    /// @notice Returns true if the user has one or more of this badge.\n    /// @param user The user's wallet address.\n    /// @return True if the user has one or more of this badge.\n    function hasBadge(address user) external view returns (bool);\n}\n"
    },
    "@canva-contracts/interfaces/IScrollBadgeResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport {Attestation} from \"@eas/contracts/IEAS.sol\";\n\ninterface IScrollBadgeResolver {\n    /**\n     *\n     * Events *\n     *\n     */\n\n    /// @dev Emitted when a new badge is issued.\n    /// @param uid The UID of the new badge attestation.\n    event IssueBadge(bytes32 indexed uid);\n\n    /// @dev Emitted when a badge is revoked.\n    /// @param uid The UID of the revoked badge attestation.\n    event RevokeBadge(bytes32 indexed uid);\n\n    /// @dev Emitted when the auto-attach status of a badge is updated.\n    /// @param badge The address of the badge contract.\n    /// @param enable Auto-attach was enabled if true, disabled if false.\n    event UpdateAutoAttachWhitelist(address indexed badge, bool indexed enable);\n\n    /**\n     *\n     * Public View Functions *\n     *\n     */\n\n    /// @notice Return the Scroll badge attestation schema.\n    /// @return The GUID of the Scroll badge attestation schema.\n    function schema() external returns (bytes32);\n\n    /// @notice The profile registry contract.\n    /// @return The address of the profile registry.\n    function registry() external returns (address);\n\n    /// @notice The global EAS contract.\n    /// @return The address of the global EAS contract.\n    function eas() external returns (address);\n\n    /// @notice Validate and return a Scroll badge attestation.\n    /// @param uid The attestation UID.\n    /// @return The attestation.\n    function getAndValidateBadge(bytes32 uid) external view returns (Attestation memory);\n}\n"
    },
    "@eas/contracts/Common.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// A representation of an empty/uninitialized UID.\nbytes32 constant EMPTY_UID = 0;\n\n// A zero expiration represents an non-expiring attestation.\nuint64 constant NO_EXPIRATION_TIME = 0;\n\nerror AccessDenied();\nerror DeadlineExpired();\nerror InvalidEAS();\nerror InvalidLength();\nerror InvalidSignature();\nerror NotFound();\n\n/// @notice A struct representing ECDSA signature data.\nstruct Signature {\n    uint8 v; // The recovery ID.\n    bytes32 r; // The x-coordinate of the nonce R.\n    bytes32 s; // The signature data.\n}\n\n/// @notice A struct representing a single attestation.\nstruct Attestation {\n    bytes32 uid; // A unique identifier of the attestation.\n    bytes32 schema; // The unique identifier of the schema.\n    uint64 time; // The time when the attestation was created (Unix timestamp).\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\n    bytes32 refUID; // The UID of the related attestation.\n    address recipient; // The recipient of the attestation.\n    address attester; // The attester/sender of the attestation.\n    bool revocable; // Whether the attestation is revocable.\n    bytes data; // Custom attestation data.\n}\n\n/// @notice A helper function to work with unchecked iterators in loops.\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\n    unchecked {\n        j = i + 1;\n    }\n}\n"
    },
    "@eas/contracts/eip712/proxy/EIP712Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport { EIP712 } from \"@openzeppelin/contracts/utils/cryptography/EIP712.sol\";\nimport { ECDSA } from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\n// prettier-ignore\nimport {\n    AccessDenied,\n    DeadlineExpired,\n    Signature,\n    InvalidEAS,\n    InvalidLength,\n    InvalidSignature,\n    NotFound,\n    NO_EXPIRATION_TIME,\n    uncheckedInc\n} from \"../../Common.sol\";\n\n// prettier-ignore\nimport {\n    AttestationRequest,\n    AttestationRequestData,\n    DelegatedAttestationRequest,\n    DelegatedRevocationRequest,\n    IEAS,\n    MultiAttestationRequest,\n    MultiDelegatedAttestationRequest,\n    MultiDelegatedRevocationRequest,\n    MultiRevocationRequest,\n    RevocationRequest,\n    RevocationRequestData\n} from \"../../IEAS.sol\";\n\nimport { Semver } from \"../../Semver.sol\";\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedProxyAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    Signature signature; // The EIP712 signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedProxyAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are\n        // assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedProxyRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    Signature signature; // The EIP712 signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedProxyRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    Signature[] signatures; // The EIP712 signatures data. Please note that the signatures are\n        // assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title EIP712Proxy\n/// @notice This utility contract an be used to aggregate delegated attestations without requiring a\n/// specific order via\n///     nonces. The contract doesn't request nonces and implements replay protection by storing\n/// ***immalleable***\n///     signatures.\ncontract EIP712Proxy is Semver, EIP712 {\n    error UsedSignature();\n\n    // The hash of the data type used to relay calls to the attest function. It's the value of\n    // keccak256(\"Attest(address attester,bytes32 schema,address recipient,uint64\n    // expirationTime,bool revocable,bytes32 refUID,bytes data,uint256 value,uint64 deadline)\").\n    bytes32 private constant ATTEST_PROXY_TYPEHASH =\n        0xea02ffba7dcb45f6fc649714d23f315eef12e3b27f9a7735d8d8bf41eb2b1af1;\n\n    // The hash of the data type used to relay calls to the revoke function. It's the value of\n    // keccak256(\"Revoke(address revoker,bytes32 schema,bytes32 uid,uint256 value,uint64\n    // deadline)\").\n    bytes32 private constant REVOKE_PROXY_TYPEHASH =\n        0x78a69a78c1a55cdff5cbf949580b410778cd9e4d1ecbe6f06a7fa8dc2441b57d;\n\n    // The global EAS contract.\n    IEAS private immutable _eas;\n\n    // The user readable name of the signing domain.\n    string private _name;\n\n    // The global mapping between proxy attestations and their attesters, so that we can verify that\n    // only the original\n    // attester is able to revert attestations by proxy.\n    mapping(bytes32 uid => address attester) private _attesters;\n\n    // Replay protection signatures.\n    mapping(bytes signature => bool used) private _signatures;\n\n    /// @dev Creates a new EIP1271Verifier instance.\n    /// @param eas The address of the global EAS contract.\n    /// @param name The user readable name of the signing domain.\n    constructor(IEAS eas, string memory name) Semver(1, 3, 0) EIP712(name, \"1.3.0\") {\n        if (address(eas) == address(0)) {\n            revert InvalidEAS();\n        }\n\n        _eas = eas;\n        _name = name;\n    }\n\n    /// @notice Returns the EAS.\n    function getEAS() external view returns (IEAS) {\n        return _eas;\n    }\n\n    /// @notice Returns the domain separator used in the encoding of the signatures for attest, and\n    /// revoke.\n    function getDomainSeparator() external view returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /// Returns the EIP712 type hash for the attest function.\n    function getAttestTypeHash() external pure returns (bytes32) {\n        return ATTEST_PROXY_TYPEHASH;\n    }\n\n    /// Returns the EIP712 type hash for the revoke function.\n    function getRevokeTypeHash() external pure returns (bytes32) {\n        return REVOKE_PROXY_TYPEHASH;\n    }\n\n    /// Returns the EIP712 name.\n    function getName() external view returns (string memory) {\n        return _name;\n    }\n\n    /// Returns the attester for a given uid.\n    function getAttester(bytes32 uid) external view returns (address) {\n        return _attesters[uid];\n    }\n\n    /// @notice Attests to a specific schema via the provided EIP712 signature.\n    /// @param delegatedRequest The arguments of the delegated attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attestByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n    ///         deadline: 1673891048\n    ///     })\n    function attestByDelegation(DelegatedProxyAttestationRequest calldata delegatedRequest)\n        public\n        payable\n        virtual\n        returns (bytes32)\n    {\n        _verifyAttest(delegatedRequest);\n\n        bytes32 uid = _eas.attest{ value: msg.value }(\n            AttestationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\n        );\n\n        _attesters[uid] = delegatedRequest.attester;\n\n        return uid;\n    }\n\n    /// @notice Attests to multiple schemas using via provided EIP712 signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The\n    /// requests should be\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttestByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         {\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiAttestByDelegation(\n        MultiDelegatedProxyAttestationRequest[] calldata multiDelegatedRequests\n    )\n        public\n        payable\n        virtual\n        returns (bytes32[] memory)\n    {\n        uint256 length = multiDelegatedRequests.length;\n        MultiAttestationRequest[] memory multiRequests = new MultiAttestationRequest[](length);\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest =\n                multiDelegatedRequests[i];\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            uint256 dataLength = data.length;\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\n                revert InvalidLength();\n            }\n\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed\n            // with increasing nonces.\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\n                _verifyAttest(\n                    DelegatedProxyAttestationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: data[j],\n                        signature: multiDelegatedRequest.signatures[j],\n                        attester: multiDelegatedRequest.attester,\n                        deadline: multiDelegatedRequest.deadline\n                    })\n                );\n            }\n\n            multiRequests[i] =\n                MultiAttestationRequest({ schema: multiDelegatedRequest.schema, data: data });\n        }\n\n        bytes32[] memory uids = _eas.multiAttest{ value: msg.value }(multiRequests);\n\n        // Store all attesters, according to the order of the attestation requests.\n        uint256 uidCounter = 0;\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            MultiDelegatedProxyAttestationRequest calldata multiDelegatedRequest =\n                multiDelegatedRequests[i];\n            AttestationRequestData[] calldata data = multiDelegatedRequest.data;\n\n            uint256 dataLength = data.length;\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\n                _attesters[uids[uidCounter]] = multiDelegatedRequest.attester;\n\n                unchecked {\n                    ++uidCounter;\n                }\n            }\n        }\n\n        return uids;\n    }\n\n    /// @notice Revokes an existing attestation to a specific schema via the provided EIP712\n    /// signature.\n    /// @param delegatedRequest The arguments of the delegated revocation request.\n    ///\n    /// Example:\n    ///     revokeByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 27,\n    ///             r: '0xb593...7142',\n    ///             s: '0x0f5b...2cce'\n    ///         },\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     })\n    function revokeByDelegation(DelegatedProxyRevocationRequest calldata delegatedRequest)\n        public\n        payable\n        virtual\n    {\n        _verifyRevoke(delegatedRequest);\n\n        return _eas.revoke{ value: msg.value }(\n            RevocationRequest({ schema: delegatedRequest.schema, data: delegatedRequest.data })\n        );\n    }\n\n    /// @notice Revokes existing attestations to multiple schemas via provided EIP712 signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation\n    /// requests. The requests\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevokeByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiRevokeByDelegation(\n        MultiDelegatedProxyRevocationRequest[] calldata multiDelegatedRequests\n    )\n        public\n        payable\n        virtual\n    {\n        uint256 length = multiDelegatedRequests.length;\n        MultiRevocationRequest[] memory multiRequests = new MultiRevocationRequest[](length);\n\n        for (uint256 i = 0; i < length; i = uncheckedInc(i)) {\n            MultiDelegatedProxyRevocationRequest memory multiDelegatedRequest =\n                multiDelegatedRequests[i];\n            RevocationRequestData[] memory data = multiDelegatedRequest.data;\n\n            // Ensure that no inputs are missing.\n            uint256 dataLength = data.length;\n            if (dataLength == 0 || dataLength != multiDelegatedRequest.signatures.length) {\n                revert InvalidLength();\n            }\n\n            // Verify EIP712 signatures. Please note that the signatures are assumed to be signed\n            // with increasing nonces.\n            for (uint256 j = 0; j < dataLength; j = uncheckedInc(j)) {\n                RevocationRequestData memory requestData = data[j];\n\n                _verifyRevoke(\n                    DelegatedProxyRevocationRequest({\n                        schema: multiDelegatedRequest.schema,\n                        data: requestData,\n                        signature: multiDelegatedRequest.signatures[j],\n                        revoker: multiDelegatedRequest.revoker,\n                        deadline: multiDelegatedRequest.deadline\n                    })\n                );\n            }\n\n            multiRequests[i] =\n                MultiRevocationRequest({ schema: multiDelegatedRequest.schema, data: data });\n        }\n\n        _eas.multiRevoke{ value: msg.value }(multiRequests);\n    }\n\n    /// @dev Verifies delegated attestation request.\n    /// @param request The arguments of the delegated attestation request.\n    function _verifyAttest(DelegatedProxyAttestationRequest memory request) internal {\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\n            revert DeadlineExpired();\n        }\n\n        AttestationRequestData memory data = request.data;\n        Signature memory signature = request.signature;\n\n        _verifyUnusedSignature(signature);\n\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    ATTEST_PROXY_TYPEHASH,\n                    request.attester,\n                    request.schema,\n                    data.recipient,\n                    data.expirationTime,\n                    data.revocable,\n                    data.refUID,\n                    keccak256(data.data),\n                    data.value,\n                    request.deadline\n                )\n            )\n        );\n\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.attester) {\n            revert InvalidSignature();\n        }\n    }\n\n    /// @dev Verifies delegated revocation request.\n    /// @param request The arguments of the delegated revocation request.\n    function _verifyRevoke(DelegatedProxyRevocationRequest memory request) internal {\n        if (request.deadline != NO_EXPIRATION_TIME && request.deadline < _time()) {\n            revert DeadlineExpired();\n        }\n\n        RevocationRequestData memory data = request.data;\n\n        // Allow only original attesters to revoke their attestations.\n        address attester = _attesters[data.uid];\n        if (attester == address(0)) {\n            revert NotFound();\n        }\n\n        if (attester != msg.sender) {\n            revert AccessDenied();\n        }\n\n        Signature memory signature = request.signature;\n\n        _verifyUnusedSignature(signature);\n\n        bytes32 digest = _hashTypedDataV4(\n            keccak256(\n                abi.encode(\n                    REVOKE_PROXY_TYPEHASH,\n                    request.revoker,\n                    request.schema,\n                    data.uid,\n                    data.value,\n                    request.deadline\n                )\n            )\n        );\n\n        if (ECDSA.recover(digest, signature.v, signature.r, signature.s) != request.revoker) {\n            revert InvalidSignature();\n        }\n    }\n\n    /// @dev Ensures that the provided EIP712 signature wasn't already used.\n    /// @param signature The EIP712 signature data.\n    function _verifyUnusedSignature(Signature memory signature) internal {\n        bytes memory packedSignature = abi.encodePacked(signature.v, signature.r, signature.s);\n\n        if (_signatures[packedSignature]) {\n            revert UsedSignature();\n        }\n\n        _signatures[packedSignature] = true;\n    }\n\n    /// @dev Returns the current's block timestamp. This method is overridden during tests and used\n    /// to simulate the\n    ///     current block time.\n    function _time() internal view virtual returns (uint64) {\n        return uint64(block.timestamp);\n    }\n}\n"
    },
    "@eas/contracts/IEAS.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISchemaRegistry } from \"./ISchemaRegistry.sol\";\nimport { ISemver } from \"./ISemver.sol\";\nimport { Attestation, Signature } from \"./Common.sol\";\n\n/// @notice A struct representing the arguments of the attestation request.\nstruct AttestationRequestData {\n    address recipient; // The recipient of the attestation.\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\n    bool revocable; // Whether the attestation is revocable.\n    bytes32 refUID; // The UID of the related attestation.\n    bytes data; // Custom attestation data.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the attestation request.\nstruct AttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the full delegated attestation request.\nstruct DelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData data; // The arguments of the attestation request.\n    Signature signature; // The ECDSA signature data.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi attestation request.\nstruct MultiAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\nstruct MultiDelegatedAttestationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    AttestationRequestData[] data; // The arguments of the attestation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address attester; // The attesting account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the arguments of the revocation request.\nstruct RevocationRequestData {\n    bytes32 uid; // The UID of the attestation to revoke.\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\n}\n\n/// @notice A struct representing the full arguments of the revocation request.\nstruct RevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the arguments of the full delegated revocation request.\nstruct DelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData data; // The arguments of the revocation request.\n    Signature signature; // The ECDSA signature data.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @notice A struct representing the full arguments of the multi revocation request.\nstruct MultiRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation request.\n}\n\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\nstruct MultiDelegatedRevocationRequest {\n    bytes32 schema; // The unique identifier of the schema.\n    RevocationRequestData[] data; // The arguments of the revocation requests.\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\n    address revoker; // The revoking account.\n    uint64 deadline; // The deadline of the signature/request.\n}\n\n/// @title IEAS\n/// @notice EAS - Ethereum Attestation Service interface.\ninterface IEAS is ISemver {\n    /// @notice Emitted when an attestation has been made.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param uid The UID the revoked attestation.\n    /// @param schemaUID The UID of the schema.\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\n\n    /// @notice Emitted when an attestation has been revoked.\n    /// @param recipient The recipient of the attestation.\n    /// @param attester The attesting account.\n    /// @param schemaUID The UID of the schema.\n    /// @param uid The UID the revoked attestation.\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\n\n    /// @notice Emitted when a data has been timestamped.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\n\n    /// @notice Emitted when a data has been revoked.\n    /// @param revoker The address of the revoker.\n    /// @param data The data.\n    /// @param timestamp The timestamp.\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\n\n    /// @notice Returns the address of the global schema registry.\n    /// @return The address of the global schema registry.\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\n\n    /// @notice Attests to a specific schema.\n    /// @param request The arguments of the attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attest({\n    ///         schema: \"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\",\n    ///         data: {\n    ///             recipient: \"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\",\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n    ///             data: \"0xF00D\",\n    ///             value: 0\n    ///         }\n    ///     })\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\n\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated attestation request.\n    /// @return The UID of the new attestation.\n    ///\n    /// Example:\n    ///     attestByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\n    ///         deadline: 1673891048\n    ///     })\n    function attestByDelegation(\n        DelegatedAttestationRequest calldata delegatedRequest\n    ) external payable returns (bytes32);\n\n    /// @notice Attests to multiple schemas.\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttest([{\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: true,\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\n    ///             data: '0x12345678',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\n\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\n    /// @return The UIDs of the new attestations.\n    ///\n    /// Example:\n    ///     multiAttestByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    ///             expirationTime: 1673891048,\n    ///             revocable: true,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x1234',\n    ///             value: 0\n    ///         },\n    ///         {\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\n    ///             expirationTime: 0,\n    ///             revocable: false,\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\n    ///             data: '0x00',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiAttestByDelegation(\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\n    ) external payable returns (bytes32[] memory);\n\n    /// @notice Revokes an existing attestation to a specific schema.\n    /// @param request The arguments of the revocation request.\n    ///\n    /// Example:\n    ///     revoke({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\n    ///             value: 0\n    ///         }\n    ///     })\n    function revoke(RevocationRequest calldata request) external payable;\n\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\n    /// @param delegatedRequest The arguments of the delegated revocation request.\n    ///\n    /// Example:\n    ///     revokeByDelegation({\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: {\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\n    ///             value: 0\n    ///         },\n    ///         signature: {\n    ///             v: 27,\n    ///             r: '0xb593...7142',\n    ///             s: '0x0f5b...2cce'\n    ///         },\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     })\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas.\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\n    ///     schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevoke([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///     },\n    ///     {\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\n    ///         data: [{\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\n    ///             value: 0\n    ///         },\n    ///     }])\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\n\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\n    ///\n    /// Example:\n    ///     multiRevokeByDelegation([{\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\n    ///         data: [{\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\n    ///             value: 1000\n    ///         },\n    ///         {\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\n    ///             value: 0\n    ///         }],\n    ///         signatures: [{\n    ///             v: 28,\n    ///             r: '0x148c...b25b',\n    ///             s: '0x5a72...be22'\n    ///         },\n    ///         {\n    ///             v: 28,\n    ///             r: '0x487s...67bb',\n    ///             s: '0x12ad...2366'\n    ///         }],\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\n    ///         deadline: 1673891048\n    ///     }])\n    function multiRevokeByDelegation(\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\n    ) external payable;\n\n    /// @notice Timestamps the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function timestamp(bytes32 data) external returns (uint64);\n\n    /// @notice Timestamps the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was timestamped with.\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Revokes the specified bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function revokeOffchain(bytes32 data) external returns (uint64);\n\n    /// @notice Revokes the specified multiple bytes32 data.\n    /// @param data The data to timestamp.\n    /// @return The timestamp the data was revoked with.\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\n\n    /// @notice Returns an existing attestation by UID.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return The attestation data members.\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\n\n    /// @notice Checks whether an attestation exists.\n    /// @param uid The UID of the attestation to retrieve.\n    /// @return Whether an attestation exists.\n    function isAttestationValid(bytes32 uid) external view returns (bool);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getTimestamp(bytes32 data) external view returns (uint64);\n\n    /// @notice Returns the timestamp that the specified data was timestamped with.\n    /// @param data The data to query.\n    /// @return The timestamp the data was timestamped with.\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\n}\n"
    },
    "@eas/contracts/ISchemaRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISemver } from \"./ISemver.sol\";\n\nimport { ISchemaResolver } from \"./resolver/ISchemaResolver.sol\";\n\n/// @notice A struct representing a record for a submitted schema.\nstruct SchemaRecord {\n    bytes32 uid; // The unique identifier of the schema.\n    ISchemaResolver resolver; // Optional schema resolver.\n    bool revocable; // Whether the schema allows revocations explicitly.\n    string schema; // Custom specification of the schema (e.g., an ABI).\n}\n\n/// @title ISchemaRegistry\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\ninterface ISchemaRegistry is ISemver {\n    /// @notice Emitted when a new schema has been registered\n    /// @param uid The schema UID.\n    /// @param registerer The address of the account used to register the schema.\n    /// @param schema The schema data.\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\n\n    /// @notice Submits and reserves a new schema\n    /// @param schema The schema data schema.\n    /// @param resolver An optional schema resolver.\n    /// @param revocable Whether the schema allows revocations explicitly.\n    /// @return The UID of the new schema.\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\n\n    /// @notice Returns an existing schema by UID\n    /// @param uid The UID of the schema to retrieve.\n    /// @return The schema data members.\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\n}\n"
    },
    "@eas/contracts/ISemver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/// @title ISemver\n/// @notice A semver interface.\ninterface ISemver {\n    /// @notice Returns the full semver contract version.\n    /// @return Semver contract version as a string.\n    function version() external view returns (string memory);\n}\n"
    },
    "@eas/contracts/resolver/ISchemaResolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport { ISemver } from \"../ISemver.sol\";\nimport { Attestation } from \"../Common.sol\";\n\n/// @title ISchemaResolver\n/// @notice The interface of an optional schema resolver.\ninterface ISchemaResolver is ISemver {\n    /// @notice Checks if the resolver can be sent ETH.\n    /// @return Whether the resolver supports ETH transfers.\n    function isPayable() external pure returns (bool);\n\n    /// @notice Processes an attestation and verifies whether it's valid.\n    /// @param attestation The new attestation.\n    /// @return Whether the attestation is valid.\n    function attest(Attestation calldata attestation) external payable returns (bool);\n\n    /// @notice Processes multiple attestations and verifies whether they are valid.\n    /// @param attestations The new attestations.\n    /// @param values Explicit ETH amounts which were sent with each attestation.\n    /// @return Whether all the attestations are valid.\n    function multiAttest(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\n    /// @param attestation The existing attestation to be revoked.\n    /// @return Whether the attestation can be revoked.\n    function revoke(Attestation calldata attestation) external payable returns (bool);\n\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\n    /// @param attestations The existing attestations to be revoked.\n    /// @param values Explicit ETH amounts which were sent with each revocation.\n    /// @return Whether the attestations can be revoked.\n    function multiRevoke(\n        Attestation[] calldata attestations,\n        uint256[] calldata values\n    ) external payable returns (bool);\n}\n"
    },
    "@eas/contracts/Semver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport { ISemver } from \"./ISemver.sol\";\n\n/// @title Semver\n/// @notice A simple contract for managing contract versions.\ncontract Semver is ISemver {\n    // Contract's major version number.\n    uint256 private immutable _major;\n\n    // Contract's minor version number.\n    uint256 private immutable _minor;\n\n    // Contract's patch version number.\n    uint256 private immutable _patch;\n\n    /// @dev Create a new Semver instance.\n    /// @param major Major version number.\n    /// @param minor Minor version number.\n    /// @param patch Patch version number.\n    constructor(uint256 major, uint256 minor, uint256 patch) {\n        _major = major;\n        _minor = minor;\n        _patch = patch;\n    }\n\n    /// @notice Returns the full semver contract version.\n    /// @return Semver contract version as a string.\n    function version() external view returns (string memory) {\n        return\n            string(\n                abi.encodePacked(Strings.toString(_major), \".\", Strings.toString(_minor), \".\", Strings.toString(_patch))\n            );\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC5267.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.0;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./ECDSA.sol\";\nimport \"../ShortStrings.sol\";\nimport \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * _Available since v3.4._\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant _TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {EIP-5267}.\n     *\n     * _Available since v4.9._\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        override\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _name.toStringWithFallback(_nameFallback),\n            _version.toStringWithFallback(_versionFallback),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ShortStrings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.8;\n\nimport \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(_FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/badge/ScrollBadgeLevelsScrolly.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport { Attestation } from \"@eas/contracts/IEAS.sol\";\n\nimport { Strings } from \"@openzeppelin/contracts/utils/Strings.sol\";\n\nimport { ScrollBadgeAccessControl } from\n    \"@canva-contracts/badge/extensions/ScrollBadgeAccessControl.sol\";\nimport { ScrollBadgeDefaultURI } from \"@canva-contracts/badge/extensions/ScrollBadgeDefaultURI.sol\";\nimport { ScrollBadgeEligibilityCheck } from\n    \"@canva-contracts/badge/extensions/ScrollBadgeEligibilityCheck.sol\";\nimport { ScrollBadgeNoExpiry } from \"@canva-contracts/badge/extensions/ScrollBadgeNoExpiry.sol\";\nimport { ScrollBadgeSelfAttest } from \"@canva-contracts/badge/extensions/ScrollBadgeSelfAttest.sol\";\nimport { ScrollBadgeSingleton } from \"@canva-contracts/badge/extensions/ScrollBadgeSingleton.sol\";\nimport { ScrollBadge } from \"@canva-contracts/badge/ScrollBadge.sol\";\nimport { Unauthorized } from \"@canva-contracts/Errors.sol\";\n\nimport { IActivityPoints } from \"../interfaces/IActivityPoints.sol\";\n\nfunction decodePayloadData(bytes memory data) pure returns (uint8) {\n    return abi.decode(data, (uint8));\n}\n\n/**\n * @title ScrollBadgeLevelsScrolly\n * @author Alderian\n * @notice A badge that represents the Scrolly user's level.\n */\ncontract ScrollBadgeLevelsScrolly is\n    ScrollBadgeAccessControl,\n    ScrollBadgeDefaultURI,\n    ScrollBadgeEligibilityCheck,\n    ScrollBadgeNoExpiry,\n    ScrollBadgeSingleton,\n    ScrollBadgeSelfAttest\n{\n    uint256 public immutable MINIMUM_POINTS_ELIGIBILITY = 1 ether; // Scrolly Baby\n    uint256 public immutable MINIMUM_POINTS_LEVEL_2 = 333 ether; // Scrolly Novice\n    uint256 public immutable MINIMUM_POINTS_LEVEL_3 = 777 ether; // Scrolly Explorer\n    uint256 public immutable MINIMUM_POINTS_LEVEL_4 = 1337 ether; // Master Mapper\n    uint256 public immutable MINIMUM_POINTS_LEVEL_5 = 2442 ether; // Carto Maestro\n    uint256 public immutable MINIMUM_POINTS_LEVEL_6 = 4200 ether; // Grand Cartographer of Scrolly\n\n    address private apAddress; // activity points contract address\n    string public baseBadgeURI;\n\n    constructor(\n        address resolver_,\n        address activityPoints_,\n        string memory _defaultBadgeURI, // IPFS, HTTP, or data URL\n        string memory _baseBadgeURI // IPFS, HTTP, or data URL to add level to get image\n    )\n        ScrollBadge(resolver_)\n        ScrollBadgeDefaultURI(_defaultBadgeURI)\n    {\n        apAddress = activityPoints_;\n        baseBadgeURI = _baseBadgeURI;\n    }\n\n    /// @inheritdoc ScrollBadge\n    function onIssueBadge(Attestation calldata attestation)\n        internal\n        override(\n            ScrollBadge,\n            ScrollBadgeAccessControl,\n            ScrollBadgeNoExpiry,\n            ScrollBadgeSingleton,\n            ScrollBadgeSelfAttest\n        )\n        returns (bool)\n    {\n        if (!isEligible(attestation.recipient)) {\n            revert Unauthorized();\n        }\n\n        return super.onIssueBadge(attestation);\n    }\n\n    /// @inheritdoc ScrollBadge\n    function onRevokeBadge(Attestation calldata attestation)\n        internal\n        override(\n            ScrollBadge,\n            ScrollBadgeAccessControl,\n            ScrollBadgeNoExpiry,\n            ScrollBadgeSingleton,\n            ScrollBadgeSelfAttest\n        )\n        returns (bool)\n    {\n        return super.onRevokeBadge(attestation);\n    }\n\n    /// @inheritdoc ScrollBadgeDefaultURI\n    function getBadgeTokenURI(bytes32 uid) internal view override returns (string memory) {\n        // We get current user level from latest attestation (using provided badge logic)\n        uint8 level = getCurrentLevel(uid);\n\n        return string(abi.encode(baseBadgeURI, Strings.toString(level), \".json\"));\n    }\n\n    function getCurrentLevel(bytes32 uid) public view returns (uint8) {\n        Attestation memory badge = getAndValidateBadge(uid);\n        return getLevel(badge.recipient);\n    }\n\n    function isEligible(address recipient) public view override returns (bool) {\n        return (IActivityPoints(apAddress).getPoints(recipient) >= MINIMUM_POINTS_ELIGIBILITY);\n    }\n\n    function getPoints(address recipient) public view returns (uint256) {\n        return IActivityPoints(apAddress).getPoints(recipient);\n    }\n\n    function getLevel(address recipient) public view returns (uint8) {\n        return determineBadgeLevel(IActivityPoints(apAddress).getPoints(recipient));\n    }\n\n    function determineBadgeLevel(uint256 points) public pure returns (uint8) {\n        if (points <= MINIMUM_POINTS_ELIGIBILITY) {\n            return 0; // 0 - unrevealed - minimum not meet\n        } else if (points < MINIMUM_POINTS_LEVEL_2) {\n            return 1; // 1 - Scrolly Baby\n        } else if (points < MINIMUM_POINTS_LEVEL_3) {\n            return 2; // 2- Scrolly Novice\n        } else if (points < MINIMUM_POINTS_LEVEL_4) {\n            return 3; // 3 - Scrolly Explorer\n        } else if (points < MINIMUM_POINTS_LEVEL_5) {\n            return 4; // 4 - Master Mapper\n        } else if (points < MINIMUM_POINTS_LEVEL_6) {\n            return 5; // 5 - Carto Maestro\n        } else {\n            return 6; // 6 - Grand Cartographer of Scrolly\n        }\n    }\n\n    function setDefaultBadgeURI(string memory _defaultBadgeURI) external onlyOwner {\n        defaultBadgeURI = _defaultBadgeURI;\n    }\n\n    function setBaseBadgeURI(string memory _baseBadgeURI) external onlyOwner {\n        baseBadgeURI = _baseBadgeURI;\n    }\n}\n"
    },
    "contracts/interfaces/IActivityPoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\ninterface IActivityPoints {\n    function getPoints(address user_) external view returns (uint256);\n}\n"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.19;\n\n// Uncomment this line to use console.log\n//\n\nlibrary Errors {\n    error Lock_CallerNotOwner();\n    error Lock_CannotWithdrawYet();\n    error Lock_UnlockTimeShouldBeInTheFuture();\n}\n\ncontract Lock {\n    uint256 public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint256 amount, uint256 when);\n\n    constructor(uint256 _unlockTime) payable {\n        if (block.timestamp >= _unlockTime) revert Errors.Lock_UnlockTimeShouldBeInTheFuture();\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your\n        // terminal\n\n\n        if (block.timestamp < unlockTime) revert Errors.Lock_CannotWithdrawYet();\n        if (msg.sender != owner) revert Errors.Lock_CallerNotOwner();\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/mock/mockActivityPoints.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nimport { IActivityPoints } from \"../interfaces/IActivityPoints.sol\";\n\ncontract MockActivityPoints is IActivityPoints {\n    function getPoints(address user_) external pure returns (uint256) {\n        if (user_ == address(0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266)) {\n            return 1_843_041_647_869_850_000_000;\n        } else if (user_ == address(0x70997970C51812dc3A010C7d01b50e0d17dc79C8)) {\n            return 650_301_247_771_830_000_000;\n        } else if (user_ == address(0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC)) {\n            return 1_100_229_365_079_355_000_000;\n        } else {\n            return 0;\n        }\n    }\n}\n"
    },
    "contracts/utils/AttesterProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.19;\n\nimport {\n    EIP712Proxy,\n    AttestationRequest,\n    RevocationRequest,\n    DelegatedProxyAttestationRequest\n} from \"@eas/contracts/eip712/proxy/EIP712Proxy.sol\";\n\nimport { Ownable } from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport { AccessDenied } from \"@eas/contracts/Common.sol\";\nimport { IEAS } from \"@eas/contracts/IEAS.sol\";\n\n/// @title AttesterProxy\n/// @notice An EIP712 proxy that allows only specific addresses to attest.\n///         Based on PermissionedEIP712Proxy in the EAS repo.\ncontract AttesterProxy is EIP712Proxy, Ownable {\n    // The global EAS contract.\n    IEAS private immutable _eas;\n\n    // Authorized badge attester accounts.\n    mapping(address attesterAddress => bool isAttester) public isAttester;\n\n    /// @dev Creates a new PermissionedEIP712Proxy instance.\n    /// @param eas The address of the global EAS contract.\n    constructor(IEAS eas) EIP712Proxy(eas, \"AttesterProxy\") {\n        _eas = eas;\n    }\n\n    /// @notice Enables or disables a given attester.\n    /// @param attester The attester address.\n    /// @param enable True if enable, false if disable.\n    function toggleAttester(address attester, bool enable) external onlyOwner {\n        isAttester[attester] = enable;\n    }\n\n    /// @inheritdoc EIP712Proxy\n    function attestByDelegation(DelegatedProxyAttestationRequest calldata delegatedRequest)\n        public\n        payable\n        override\n        returns (bytes32)\n    {\n        // Ensure that only the owner is allowed to delegate attestations.\n        _verifyAttester(delegatedRequest.attester);\n\n        // Ensure that only the recipient can submit delegated attestation transactions.\n        if (msg.sender != delegatedRequest.data.recipient) {\n            revert AccessDenied();\n        }\n\n        return super.attestByDelegation(delegatedRequest);\n    }\n\n    /// @notice Create attestation through the proxy.\n    /// @param request The arguments of the attestation request.\n    /// @return The UID of the new attestation.\n    function attest(AttestationRequest calldata request) external returns (bytes32) {\n        _verifyAttester(msg.sender);\n        return _eas.attest(request);\n    }\n\n    /// @notice Revoke attestation through the proxy.\n    /// @param request The arguments of the revocation request.\n    function revoke(RevocationRequest calldata request) external {\n        _verifyAttester(msg.sender);\n        _eas.revoke(request);\n    }\n\n    /// @dev Ensures that only the allowed attester can attest.\n    /// @param attester The attester to verify.\n    function _verifyAttester(address attester) private view {\n        if (!isAttester[attester]) {\n            revert AccessDenied();\n        }\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}