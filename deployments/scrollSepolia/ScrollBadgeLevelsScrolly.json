{
  "address": "0xfbC9dc7B0A9Aba5afa46aDfd0205C0660e1F8aae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "resolver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "activityPoints_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_defaultBadgeURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_baseBadgeURI",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "AttestationBadgeMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpirationDisabled",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SingletonBadge",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "IssueBadge",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "RevokeBadge",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MINIMUM_POINTS_ELIGIBILITY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_POINTS_LEVEL_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_POINTS_LEVEL_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_POINTS_LEVEL_4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_POINTS_LEVEL_5",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_POINTS_LEVEL_6",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "badgeTokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseBadgeURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultBadgeURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "points",
          "type": "uint256"
        }
      ],
      "name": "determineBadgeLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "getAndValidateBadge",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "uid",
          "type": "bytes32"
        }
      ],
      "name": "getCurrentLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getLevel",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "getPoints",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "hasBadge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isAttester",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "isEligible",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "issueBadge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolver",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "uid",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "schema",
              "type": "bytes32"
            },
            {
              "internalType": "uint64",
              "name": "time",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "expirationTime",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "revocationTime",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "refUID",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "attester",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "revocable",
              "type": "bool"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct Attestation",
          "name": "attestation",
          "type": "tuple"
        }
      ],
      "name": "revokeBadge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseBadgeURI",
          "type": "string"
        }
      ],
      "name": "setBaseBadgeURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_defaultBadgeURI",
          "type": "string"
        }
      ],
      "name": "setDefaultBadgeURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "attester",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enable",
          "type": "bool"
        }
      ],
      "name": "toggleAttester",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x45ce7089607c65b0d61854ae0b4952688dd84687a4b06afd9f27ad5f6307ca62",
  "receipt": {
    "to": null,
    "from": "0xDF9915cd8b8205f64979aC7d5AfC69f4F1c92437",
    "contractAddress": "0xfbC9dc7B0A9Aba5afa46aDfd0205C0660e1F8aae",
    "transactionIndex": 0,
    "gasUsed": "1551142",
    "logsBloom": "0x
    "blockHash": "0x71ab37c0271d8cac44261584471e50bb56e5aa010bcd210156f8eb07293b9f23",
    "transactionHash": "0x45ce7089607c65b0d61854ae0b4952688dd84687a4b06afd9f27ad5f6307ca62",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4170356,
        "transactionHash": "0x45ce7089607c65b0d61854ae0b4952688dd84687a4b06afd9f27ad5f6307ca62",
        "address": "0xfbC9dc7B0A9Aba5afa46aDfd0205C0660e1F8aae",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000df9915cd8b8205f64979ac7d5afc69f4f1c92437"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x71ab37c0271d8cac44261584471e50bb56e5aa010bcd210156f8eb07293b9f23"
      }
    ],
    "blockNumber": 4170356,
    "cumulativeGasUsed": "1551142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd2270b3540FD2220Fa1025414e1625af8B0dd8f3",
    "0x90F79bf6EB2c4f870365E785982E1f101E93b906",
    "https://scrolly-badge-server.vercel.app/api/badge/token",
    "https://scrolly-badge-server.vercel.app/api/badge/token?level="
  ],
  "numDeployments": 2,
  "solcInputHash": "2e8390b44d04599db7d78934ae7848f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"activityPoints_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_defaultBadgeURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_baseBadgeURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"AttestationBadgeMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpirationDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SingletonBadge\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"IssueBadge\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"RevokeBadge\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINIMUM_POINTS_ELIGIBILITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_POINTS_LEVEL_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_POINTS_LEVEL_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_POINTS_LEVEL_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_POINTS_LEVEL_5\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_POINTS_LEVEL_6\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"badgeTokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseBadgeURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBadgeURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"points\",\"type\":\"uint256\"}],\"name\":\"determineBadgeLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getAndValidateBadge\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"}],\"name\":\"getCurrentLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getLevel\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getPoints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasBadge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAttester\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"isEligible\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"issueBadge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"uid\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"schema\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"time\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"expirationTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"revocationTime\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"refUID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"revocable\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct Attestation\",\"name\":\"attestation\",\"type\":\"tuple\"}],\"name\":\"revokeBadge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseBadgeURI\",\"type\":\"string\"}],\"name\":\"setBaseBadgeURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_defaultBadgeURI\",\"type\":\"string\"}],\"name\":\"setDefaultBadgeURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"attester\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"toggleAttester\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alderian\",\"kind\":\"dev\",\"methods\":{\"badgeTokenURI(bytes32)\":{\"params\":{\"uid\":\"The badge UID, or 0x0.\"},\"returns\":{\"_0\":\"The badge token URI (same format as ERC721).\"}},\"getAndValidateBadge(bytes32)\":{\"params\":{\"uid\":\"The attestation UID.\"},\"returns\":{\"_0\":\"The attestation.\"}},\"hasBadge(address)\":{\"params\":{\"user\":\"The user's wallet address.\"},\"returns\":{\"_0\":\"True if the user has one or more of this badge.\"}},\"isEligible(address)\":{\"params\":{\"recipient\":\"The user's wallet address.\"},\"returns\":{\"_0\":\"Whether the user is eligible to mint.\"}},\"issueBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation is valid.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"revokeBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"params\":{\"attestation\":\"The new attestation.\"},\"returns\":{\"_0\":\"Whether the attestation can be revoked.\"}},\"toggleAttester(address,bool)\":{\"params\":{\"attester\":\"The attester address.\",\"enable\":\"True if enable, false if disable.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ScrollBadgeLevelsScrolly\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"badgeTokenURI(bytes32)\":{\"notice\":\"Returns the token URI corresponding to a certain badge UID, or the default         badge token URI if the pass UID is 0x0.\"},\"getAndValidateBadge(bytes32)\":{\"notice\":\"Validate and return a Scroll badge attestation.\"},\"hasBadge(address)\":{\"notice\":\"Returns true if the user has one or more of this badge.\"},\"isEligible(address)\":{\"notice\":\"Check if user is eligible to mint this badge.\"},\"issueBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"A resolver callback invoked in the `issueBadge` function in the parent contract.\"},\"revokeBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))\":{\"notice\":\"A resolver callback invoked in the `revokeBadge` function in the parent contract.\"},\"toggleAttester(address,bool)\":{\"notice\":\"Enables or disables a given attester.\"}},\"notice\":\"A badge that represents the Scrolly user's level.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/badge/ScrollBadgeLevelsScrolly.sol\":\"ScrollBadgeLevelsScrolly\"},\"evmVersion\":\"paris\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@canva-contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nuint256 constant MAX_ATTACHED_BADGE_NUM = 48;\\n\\nstring constant SCROLL_BADGE_SCHEMA = \\\"address badge, bytes payload\\\";\\n\\nfunction decodeBadgeData(bytes memory data) pure returns (address, bytes memory) {\\n    return abi.decode(data, (address, bytes));\\n}\\n\",\"keccak256\":\"0x0c5e0fa565efa769b21bd71d86640477679c7606df8381f948ddee83bfc95378\",\"license\":\"MIT\"},\"@canva-contracts/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nerror Unauthorized();\\n\\n// attestation errors\\n// note: these don't include the uid since it is not known prior to the attestation.\\nerror BadgeNotAllowed(address badge);\\nerror BadgeNotFound(address badge);\\nerror ExpirationDisabled();\\nerror MissingPayload();\\nerror ResolverPaymentsDisabled();\\nerror RevocationDisabled();\\nerror SingletonBadge();\\nerror UnknownSchema();\\n\\n// query errors\\nerror AttestationBadgeMismatch(bytes32 uid);\\nerror AttestationExpired(bytes32 uid);\\nerror AttestationNotFound(bytes32 uid);\\nerror AttestationOwnerMismatch(bytes32 uid);\\nerror AttestationRevoked(bytes32 uid);\\nerror AttestationSchemaMismatch(bytes32 uid);\\n\\n// profile errors\\nerror BadgeCountReached();\\nerror LengthMismatch();\\nerror TokenNotOwnedByUser(address token, uint256 tokenId);\\n\\n// profile registry errors\\nerror CallerIsNotUserProfile();\\nerror DuplicatedUsername();\\nerror ExpiredSignature();\\nerror ImplementationNotContract();\\nerror InvalidReferrer();\\nerror InvalidSignature();\\nerror InvalidUsername();\\nerror MsgValueMismatchWithMintFee();\\nerror ProfileAlreadyMinted();\\n\",\"keccak256\":\"0x7ebbfe4bb99638a765945bd731b1be637b6e89408a6c8c98032dd8e2636cff60\",\"license\":\"MIT\"},\"@canva-contracts/badge/ScrollBadge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Attestation} from \\\"@eas/contracts/IEAS.sol\\\";\\n\\nimport {decodeBadgeData} from \\\"../Common.sol\\\";\\nimport {IScrollBadge} from \\\"../interfaces/IScrollBadge.sol\\\";\\nimport {IScrollBadgeResolver} from \\\"../interfaces/IScrollBadgeResolver.sol\\\";\\nimport {AttestationBadgeMismatch, Unauthorized} from \\\"../Errors.sol\\\";\\n\\n/// @title ScrollBadge\\n/// @notice This contract implements the basic functionalities of a Scroll badge.\\n///         It serves as the base contract for more complex badge functionalities.\\nabstract contract ScrollBadge is IScrollBadge {\\n    // The global Scroll badge resolver contract.\\n    address public immutable resolver;\\n\\n    // wallet address => badge count\\n    mapping(address => uint256) private _userBadgeCount;\\n\\n    /// @dev Creates a new ScrollBadge instance.\\n    /// @param resolver_ The address of the global Scroll badge resolver contract.\\n    constructor(address resolver_) {\\n        resolver = resolver_;\\n    }\\n\\n    /// @inheritdoc IScrollBadge\\n    function issueBadge(Attestation calldata attestation) public returns (bool) {\\n        // only callable from resolver\\n        if (msg.sender != address(resolver)) {\\n            revert Unauthorized();\\n        }\\n\\n        // delegate logic to subcontract\\n        if (!onIssueBadge(attestation)) {\\n            return false;\\n        }\\n\\n        _userBadgeCount[attestation.recipient] += 1;\\n\\n        emit IssueBadge(attestation.uid);\\n        return true;\\n    }\\n\\n    /// @inheritdoc IScrollBadge\\n    function revokeBadge(Attestation calldata attestation) public returns (bool) {\\n        // only callable from resolver\\n        if (msg.sender != address(resolver)) {\\n            revert Unauthorized();\\n        }\\n\\n        // delegate logic to subcontract\\n        if (!onRevokeBadge(attestation)) {\\n            return false;\\n        }\\n\\n        _userBadgeCount[attestation.recipient] -= 1;\\n\\n        emit RevokeBadge(attestation.uid);\\n        return true;\\n    }\\n\\n    /// @notice A resolver callback that should be implemented by child contracts.\\n    /// @param {attestation} The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function onIssueBadge(Attestation calldata /*attestation*/ ) internal virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /// @notice A resolver callback that should be implemented by child contracts.\\n    /// @param {attestation} The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function onRevokeBadge(Attestation calldata /*attestation*/ ) internal virtual returns (bool) {\\n        return true;\\n    }\\n\\n    /// @inheritdoc IScrollBadge\\n    function getAndValidateBadge(bytes32 uid) public view returns (Attestation memory) {\\n        Attestation memory attestation = IScrollBadgeResolver(resolver).getAndValidateBadge(uid);\\n\\n        (address badge,) = decodeBadgeData(attestation.data);\\n\\n        if (badge != address(this)) {\\n            revert AttestationBadgeMismatch(uid);\\n        }\\n\\n        return attestation;\\n    }\\n\\n    /// @inheritdoc IScrollBadge\\n    function badgeTokenURI(bytes32 uid) public view virtual returns (string memory);\\n\\n    /// @inheritdoc IScrollBadge\\n    function hasBadge(address user) public view returns (bool) {\\n        return _userBadgeCount[user] > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x809d38c606543a10946ceccc91568f4fc5a5453dcbab77309705fede41ae8cf1\",\"license\":\"MIT\"},\"@canva-contracts/badge/extensions/ScrollBadgeAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Attestation} from \\\"@eas/contracts/IEAS.sol\\\";\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport {ScrollBadge} from \\\"../ScrollBadge.sol\\\";\\nimport {Unauthorized} from \\\"../../Errors.sol\\\";\\n\\n/// @title ScrollBadgeAccessControl\\n/// @notice This contract adds access control to ScrollBadge.\\n/// @dev In EAS, only the original attester can revoke an attestation. If the original\\n//       attester was removed and a new was added in this contract, it will not be able\\n//       to revoke previous attestations.\\nabstract contract ScrollBadgeAccessControl is Ownable, ScrollBadge {\\n    // Authorized badge issuer and revoker accounts.\\n    mapping(address => bool) public isAttester;\\n\\n    /// @notice Enables or disables a given attester.\\n    /// @param attester The attester address.\\n    /// @param enable True if enable, false if disable.\\n    function toggleAttester(address attester, bool enable) external onlyOwner {\\n        isAttester[attester] = enable;\\n    }\\n\\n    /// @inheritdoc ScrollBadge\\n    function onIssueBadge(Attestation calldata attestation) internal virtual override returns (bool) {\\n        if (!super.onIssueBadge(attestation)) {\\n            return false;\\n        }\\n\\n        // only allow authorized issuers\\n        if (!isAttester[attestation.attester]) {\\n            revert Unauthorized();\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ScrollBadge\\n    function onRevokeBadge(Attestation calldata attestation) internal virtual override returns (bool) {\\n        if (!super.onRevokeBadge(attestation)) {\\n            return false;\\n        }\\n\\n        // only allow authorized revokers\\n        if (!isAttester[attestation.attester]) {\\n            revert Unauthorized();\\n        }\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x3b31417b07e86c1eb66b75a382951dc0ba63945f9afc279d12639c84c326e6cc\",\"license\":\"MIT\"},\"@canva-contracts/badge/extensions/ScrollBadgeDefaultURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {ScrollBadge} from \\\"../ScrollBadge.sol\\\";\\n\\n/// @title ScrollBadgeDefaultURI\\n/// @notice This contract sets a default badge URI.\\nabstract contract ScrollBadgeDefaultURI is ScrollBadge {\\n    string public defaultBadgeURI;\\n\\n    constructor(string memory _defaultBadgeURI) {\\n        defaultBadgeURI = _defaultBadgeURI;\\n    }\\n\\n    /// @inheritdoc ScrollBadge\\n    function badgeTokenURI(bytes32 uid) public view override returns (string memory) {\\n        if (uid == bytes32(0)) {\\n            return defaultBadgeURI;\\n        }\\n\\n        return getBadgeTokenURI(uid);\\n    }\\n\\n    /// @notice Returns the token URI corresponding to a certain badge UID.\\n    /// @param uid The badge UID.\\n    /// @return The badge token URI (same format as ERC721).\\n    function getBadgeTokenURI(bytes32 uid) internal view virtual returns (string memory);\\n}\\n\",\"keccak256\":\"0xbedea125ef27d01895c2aad788c296d5c62fa99ef6af42dba3bd7602f30a75a2\",\"license\":\"MIT\"},\"@canva-contracts/badge/extensions/ScrollBadgeEligibilityCheck.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {ScrollBadge} from \\\"../ScrollBadge.sol\\\";\\n\\n/// @title ScrollBadgeEligibilityCheck\\n/// @notice This contract adds a standard on-chain eligibility check API.\\nabstract contract ScrollBadgeEligibilityCheck is ScrollBadge {\\n    /// @notice Check if user is eligible to mint this badge.\\n    /// @param recipient The user's wallet address.\\n    /// @return Whether the user is eligible to mint.\\n    function isEligible(address recipient) external virtual returns (bool) {\\n        return !hasBadge(recipient);\\n    }\\n}\\n\",\"keccak256\":\"0xfeb97695c12a77c04c24394ef451a83d6e481953e8e252d3a7cc95b8e8bb65c6\",\"license\":\"MIT\"},\"@canva-contracts/badge/extensions/ScrollBadgeNoExpiry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Attestation} from \\\"@eas/contracts/IEAS.sol\\\";\\nimport {NO_EXPIRATION_TIME} from \\\"@eas/contracts/Common.sol\\\";\\n\\nimport {ScrollBadge} from \\\"../ScrollBadge.sol\\\";\\nimport {ExpirationDisabled} from \\\"../../Errors.sol\\\";\\n\\n/// @title ScrollBadgeNoExpiry\\n/// @notice This contract disables expiration for this badge.\\nabstract contract ScrollBadgeNoExpiry is ScrollBadge {\\n    /// @inheritdoc ScrollBadge\\n    function onIssueBadge(Attestation calldata attestation) internal virtual override returns (bool) {\\n        if (!super.onIssueBadge(attestation)) {\\n            return false;\\n        }\\n\\n        if (attestation.expirationTime != NO_EXPIRATION_TIME) {\\n            revert ExpirationDisabled();\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ScrollBadge\\n    function onRevokeBadge(Attestation calldata attestation) internal virtual override returns (bool) {\\n        return super.onRevokeBadge(attestation);\\n    }\\n}\\n\",\"keccak256\":\"0x74b7d2dea1c9e5c6eb14aa5cebb2749120f49d3863050ad8f927d7fa9002a87f\",\"license\":\"MIT\"},\"@canva-contracts/badge/extensions/ScrollBadgeSingleton.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Attestation} from \\\"@eas/contracts/IEAS.sol\\\";\\n\\nimport {ScrollBadge} from \\\"../ScrollBadge.sol\\\";\\nimport {SingletonBadge} from \\\"../../Errors.sol\\\";\\n\\n/// @title ScrollBadgeSingleton\\n/// @notice This contract only allows one active badge per wallet.\\nabstract contract ScrollBadgeSingleton is ScrollBadge {\\n    /// @inheritdoc ScrollBadge\\n    function onIssueBadge(Attestation calldata attestation) internal virtual override returns (bool) {\\n        if (!super.onIssueBadge(attestation)) {\\n            return false;\\n        }\\n\\n        if (hasBadge(attestation.recipient)) {\\n            revert SingletonBadge();\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc ScrollBadge\\n    function onRevokeBadge(Attestation calldata attestation) internal virtual override returns (bool) {\\n        return super.onRevokeBadge(attestation);\\n    }\\n}\\n\",\"keccak256\":\"0x5484f08d0f09119136f9fb69082682797ec5a985e6d2a89dcbf50f2bc8602cf2\",\"license\":\"MIT\"},\"@canva-contracts/interfaces/IScrollBadge.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Attestation} from \\\"@eas/contracts/IEAS.sol\\\";\\n\\ninterface IScrollBadge {\\n    event IssueBadge(bytes32 indexed uid);\\n    event RevokeBadge(bytes32 indexed uid);\\n\\n    /// @notice A resolver callback invoked in the `issueBadge` function in the parent contract.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function issueBadge(Attestation calldata attestation) external returns (bool);\\n\\n    /// @notice A resolver callback invoked in the `revokeBadge` function in the parent contract.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation can be revoked.\\n    function revokeBadge(Attestation calldata attestation) external returns (bool);\\n\\n    /// @notice Validate and return a Scroll badge attestation.\\n    /// @param uid The attestation UID.\\n    /// @return The attestation.\\n    function getAndValidateBadge(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Returns the token URI corresponding to a certain badge UID, or the default\\n    ///         badge token URI if the pass UID is 0x0.\\n    /// @param uid The badge UID, or 0x0.\\n    /// @return The badge token URI (same format as ERC721).\\n    function badgeTokenURI(bytes32 uid) external view returns (string memory);\\n\\n    /// @notice Returns true if the user has one or more of this badge.\\n    /// @param user The user's wallet address.\\n    /// @return True if the user has one or more of this badge.\\n    function hasBadge(address user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2b8514e6c836d5308b43856215c10ffb46ad4d0c4a3615808ff0302661dea671\",\"license\":\"MIT\"},\"@canva-contracts/interfaces/IScrollBadgeResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport {Attestation} from \\\"@eas/contracts/IEAS.sol\\\";\\n\\ninterface IScrollBadgeResolver {\\n    /**\\n     *\\n     * Events *\\n     *\\n     */\\n\\n    /// @dev Emitted when a new badge is issued.\\n    /// @param uid The UID of the new badge attestation.\\n    event IssueBadge(bytes32 indexed uid);\\n\\n    /// @dev Emitted when a badge is revoked.\\n    /// @param uid The UID of the revoked badge attestation.\\n    event RevokeBadge(bytes32 indexed uid);\\n\\n    /// @dev Emitted when the auto-attach status of a badge is updated.\\n    /// @param badge The address of the badge contract.\\n    /// @param enable Auto-attach was enabled if true, disabled if false.\\n    event UpdateAutoAttachWhitelist(address indexed badge, bool indexed enable);\\n\\n    /**\\n     *\\n     * Public View Functions *\\n     *\\n     */\\n\\n    /// @notice Return the Scroll badge attestation schema.\\n    /// @return The GUID of the Scroll badge attestation schema.\\n    function schema() external returns (bytes32);\\n\\n    /// @notice The profile registry contract.\\n    /// @return The address of the profile registry.\\n    function registry() external returns (address);\\n\\n    /// @notice The global EAS contract.\\n    /// @return The address of the global EAS contract.\\n    function eas() external returns (address);\\n\\n    /// @notice Validate and return a Scroll badge attestation.\\n    /// @param uid The attestation UID.\\n    /// @return The attestation.\\n    function getAndValidateBadge(bytes32 uid) external view returns (Attestation memory);\\n}\\n\",\"keccak256\":\"0xc49a2d5859713f9938ed92593ed005ca07f3b179869aaaa473b960db47568092\",\"license\":\"MIT\"},\"@eas/contracts/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// A representation of an empty/uninitialized UID.\\nbytes32 constant EMPTY_UID = 0;\\n\\n// A zero expiration represents an non-expiring attestation.\\nuint64 constant NO_EXPIRATION_TIME = 0;\\n\\nerror AccessDenied();\\nerror DeadlineExpired();\\nerror InvalidEAS();\\nerror InvalidLength();\\nerror InvalidSignature();\\nerror NotFound();\\n\\n/// @notice A struct representing ECDSA signature data.\\nstruct Signature {\\n    uint8 v; // The recovery ID.\\n    bytes32 r; // The x-coordinate of the nonce R.\\n    bytes32 s; // The signature data.\\n}\\n\\n/// @notice A struct representing a single attestation.\\nstruct Attestation {\\n    bytes32 uid; // A unique identifier of the attestation.\\n    bytes32 schema; // The unique identifier of the schema.\\n    uint64 time; // The time when the attestation was created (Unix timestamp).\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    uint64 revocationTime; // The time when the attestation was revoked (Unix timestamp).\\n    bytes32 refUID; // The UID of the related attestation.\\n    address recipient; // The recipient of the attestation.\\n    address attester; // The attester/sender of the attestation.\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes data; // Custom attestation data.\\n}\\n\\n/// @notice A helper function to work with unchecked iterators in loops.\\nfunction uncheckedInc(uint256 i) pure returns (uint256 j) {\\n    unchecked {\\n        j = i + 1;\\n    }\\n}\\n\",\"keccak256\":\"0x957bd2e6d0d6d637f86208b135c29fbaf4412cb08e5e7a61ede16b80561bf685\",\"license\":\"MIT\"},\"@eas/contracts/IEAS.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISchemaRegistry } from \\\"./ISchemaRegistry.sol\\\";\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\nimport { Attestation, Signature } from \\\"./Common.sol\\\";\\n\\n/// @notice A struct representing the arguments of the attestation request.\\nstruct AttestationRequestData {\\n    address recipient; // The recipient of the attestation.\\n    uint64 expirationTime; // The time when the attestation expires (Unix timestamp).\\n    bool revocable; // Whether the attestation is revocable.\\n    bytes32 refUID; // The UID of the related attestation.\\n    bytes data; // Custom attestation data.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the attestation request.\\nstruct AttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the full delegated attestation request.\\nstruct DelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData data; // The arguments of the attestation request.\\n    Signature signature; // The ECDSA signature data.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi attestation request.\\nstruct MultiAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi attestation request.\\nstruct MultiDelegatedAttestationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    AttestationRequestData[] data; // The arguments of the attestation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address attester; // The attesting account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the arguments of the revocation request.\\nstruct RevocationRequestData {\\n    bytes32 uid; // The UID of the attestation to revoke.\\n    uint256 value; // An explicit ETH amount to send to the resolver. This is important to prevent accidental user errors.\\n}\\n\\n/// @notice A struct representing the full arguments of the revocation request.\\nstruct RevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the arguments of the full delegated revocation request.\\nstruct DelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData data; // The arguments of the revocation request.\\n    Signature signature; // The ECDSA signature data.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @notice A struct representing the full arguments of the multi revocation request.\\nstruct MultiRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation request.\\n}\\n\\n/// @notice A struct representing the full arguments of the delegated multi revocation request.\\nstruct MultiDelegatedRevocationRequest {\\n    bytes32 schema; // The unique identifier of the schema.\\n    RevocationRequestData[] data; // The arguments of the revocation requests.\\n    Signature[] signatures; // The ECDSA signatures data. Please note that the signatures are assumed to be signed with increasing nonces.\\n    address revoker; // The revoking account.\\n    uint64 deadline; // The deadline of the signature/request.\\n}\\n\\n/// @title IEAS\\n/// @notice EAS - Ethereum Attestation Service interface.\\ninterface IEAS is ISemver {\\n    /// @notice Emitted when an attestation has been made.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param uid The UID the revoked attestation.\\n    /// @param schemaUID The UID of the schema.\\n    event Attested(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when an attestation has been revoked.\\n    /// @param recipient The recipient of the attestation.\\n    /// @param attester The attesting account.\\n    /// @param schemaUID The UID of the schema.\\n    /// @param uid The UID the revoked attestation.\\n    event Revoked(address indexed recipient, address indexed attester, bytes32 uid, bytes32 indexed schemaUID);\\n\\n    /// @notice Emitted when a data has been timestamped.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event Timestamped(bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Emitted when a data has been revoked.\\n    /// @param revoker The address of the revoker.\\n    /// @param data The data.\\n    /// @param timestamp The timestamp.\\n    event RevokedOffchain(address indexed revoker, bytes32 indexed data, uint64 indexed timestamp);\\n\\n    /// @notice Returns the address of the global schema registry.\\n    /// @return The address of the global schema registry.\\n    function getSchemaRegistry() external view returns (ISchemaRegistry);\\n\\n    /// @notice Attests to a specific schema.\\n    /// @param request The arguments of the attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attest({\\n    ///         schema: \\\"0facc36681cbe2456019c1b0d1e7bedd6d1d40f6f324bf3dd3a4cef2999200a0\\\",\\n    ///         data: {\\n    ///             recipient: \\\"0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf\\\",\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: \\\"0x0000000000000000000000000000000000000000000000000000000000000000\\\",\\n    ///             data: \\\"0xF00D\\\",\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function attest(AttestationRequest calldata request) external payable returns (bytes32);\\n\\n    /// @notice Attests to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated attestation request.\\n    /// @return The UID of the new attestation.\\n    ///\\n    /// Example:\\n    ///     attestByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         attester: '0xc5E8740aD971409492b1A63Db8d83025e0Fc427e',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function attestByDelegation(\\n        DelegatedAttestationRequest calldata delegatedRequest\\n    ) external payable returns (bytes32);\\n\\n    /// @notice Attests to multiple schemas.\\n    /// @param multiRequests The arguments of the multi attestation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttest([{\\n    ///         schema: '0x33e9094830a5cba5554d1954310e4fbed2ef5f859ec1404619adea4207f391fd',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x480df4a039efc31b11bfdf491b383ca138b6bde160988222a2a3509c02cee174',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: true,\\n    ///             refUID: '0x75bf2ed8dca25a8190c50c52db136664de25b2449535839008ccfdab469b214f',\\n    ///             data: '0x12345678',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiAttest(MultiAttestationRequest[] calldata multiRequests) external payable returns (bytes32[] memory);\\n\\n    /// @notice Attests to multiple schemas using via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi attestation requests. The requests should be\\n    ///     grouped by distinct schema ids to benefit from the best batching optimization.\\n    /// @return The UIDs of the new attestations.\\n    ///\\n    /// Example:\\n    ///     multiAttestByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             recipient: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\\n    ///             expirationTime: 1673891048,\\n    ///             revocable: true,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x1234',\\n    ///             value: 0\\n    ///         },\\n    ///         {\\n    ///             recipient: '0xdEADBeAFdeAdbEafdeadbeafDeAdbEAFdeadbeaf',\\n    ///             expirationTime: 0,\\n    ///             revocable: false,\\n    ///             refUID: '0x0000000000000000000000000000000000000000000000000000000000000000',\\n    ///             data: '0x00',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         attester: '0x1D86495b2A7B524D747d2839b3C645Bed32e8CF4',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiAttestByDelegation(\\n        MultiDelegatedAttestationRequest[] calldata multiDelegatedRequests\\n    ) external payable returns (bytes32[] memory);\\n\\n    /// @notice Revokes an existing attestation to a specific schema.\\n    /// @param request The arguments of the revocation request.\\n    ///\\n    /// Example:\\n    ///     revoke({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0x101032e487642ee04ee17049f99a70590c735b8614079fc9275f9dd57c00966d',\\n    ///             value: 0\\n    ///         }\\n    ///     })\\n    function revoke(RevocationRequest calldata request) external payable;\\n\\n    /// @notice Revokes an existing attestation to a specific schema via the provided ECDSA signature.\\n    /// @param delegatedRequest The arguments of the delegated revocation request.\\n    ///\\n    /// Example:\\n    ///     revokeByDelegation({\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: {\\n    ///             uid: '0xcbbc12102578c642a0f7b34fe7111e41afa25683b6cd7b5a14caf90fa14d24ba',\\n    ///             value: 0\\n    ///         },\\n    ///         signature: {\\n    ///             v: 27,\\n    ///             r: '0xb593...7142',\\n    ///             s: '0x0f5b...2cce'\\n    ///         },\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     })\\n    function revokeByDelegation(DelegatedRevocationRequest calldata delegatedRequest) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas.\\n    /// @param multiRequests The arguments of the multi revocation requests. The requests should be grouped by distinct\\n    ///     schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevoke([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///     },\\n    ///     {\\n    ///         schema: '0x5ac273ce41e3c8bfa383efe7c03e54c5f0bff29c9f11ef6ffa930fc84ca32425',\\n    ///         data: [{\\n    ///             uid: '0x053d42abce1fd7c8fcddfae21845ad34dae287b2c326220b03ba241bc5a8f019',\\n    ///             value: 0\\n    ///         },\\n    ///     }])\\n    function multiRevoke(MultiRevocationRequest[] calldata multiRequests) external payable;\\n\\n    /// @notice Revokes existing attestations to multiple schemas via provided ECDSA signatures.\\n    /// @param multiDelegatedRequests The arguments of the delegated multi revocation attestation requests. The requests\\n    ///     should be grouped by distinct schema ids to benefit from the best batching optimization.\\n    ///\\n    /// Example:\\n    ///     multiRevokeByDelegation([{\\n    ///         schema: '0x8e72f5bc0a8d4be6aa98360baa889040c50a0e51f32dbf0baa5199bd93472ebc',\\n    ///         data: [{\\n    ///             uid: '0x211296a1ca0d7f9f2cfebf0daaa575bea9b20e968d81aef4e743d699c6ac4b25',\\n    ///             value: 1000\\n    ///         },\\n    ///         {\\n    ///             uid: '0xe160ac1bd3606a287b4d53d5d1d6da5895f65b4b4bab6d93aaf5046e48167ade',\\n    ///             value: 0\\n    ///         }],\\n    ///         signatures: [{\\n    ///             v: 28,\\n    ///             r: '0x148c...b25b',\\n    ///             s: '0x5a72...be22'\\n    ///         },\\n    ///         {\\n    ///             v: 28,\\n    ///             r: '0x487s...67bb',\\n    ///             s: '0x12ad...2366'\\n    ///         }],\\n    ///         revoker: '0x244934dd3e31bE2c81f84ECf0b3E6329F5381992',\\n    ///         deadline: 1673891048\\n    ///     }])\\n    function multiRevokeByDelegation(\\n        MultiDelegatedRevocationRequest[] calldata multiDelegatedRequests\\n    ) external payable;\\n\\n    /// @notice Timestamps the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function timestamp(bytes32 data) external returns (uint64);\\n\\n    /// @notice Timestamps the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was timestamped with.\\n    function multiTimestamp(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Revokes the specified bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function revokeOffchain(bytes32 data) external returns (uint64);\\n\\n    /// @notice Revokes the specified multiple bytes32 data.\\n    /// @param data The data to timestamp.\\n    /// @return The timestamp the data was revoked with.\\n    function multiRevokeOffchain(bytes32[] calldata data) external returns (uint64);\\n\\n    /// @notice Returns an existing attestation by UID.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return The attestation data members.\\n    function getAttestation(bytes32 uid) external view returns (Attestation memory);\\n\\n    /// @notice Checks whether an attestation exists.\\n    /// @param uid The UID of the attestation to retrieve.\\n    /// @return Whether an attestation exists.\\n    function isAttestationValid(bytes32 uid) external view returns (bool);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getTimestamp(bytes32 data) external view returns (uint64);\\n\\n    /// @notice Returns the timestamp that the specified data was timestamped with.\\n    /// @param data The data to query.\\n    /// @return The timestamp the data was timestamped with.\\n    function getRevokeOffchain(address revoker, bytes32 data) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0x242e0203b314c8539fd4ad3c1f0b7a9c1178fe55b223f4bc007eb9cbf271854c\",\"license\":\"MIT\"},\"@eas/contracts/ISchemaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"./ISemver.sol\\\";\\n\\nimport { ISchemaResolver } from \\\"./resolver/ISchemaResolver.sol\\\";\\n\\n/// @notice A struct representing a record for a submitted schema.\\nstruct SchemaRecord {\\n    bytes32 uid; // The unique identifier of the schema.\\n    ISchemaResolver resolver; // Optional schema resolver.\\n    bool revocable; // Whether the schema allows revocations explicitly.\\n    string schema; // Custom specification of the schema (e.g., an ABI).\\n}\\n\\n/// @title ISchemaRegistry\\n/// @notice The interface of global attestation schemas for the Ethereum Attestation Service protocol.\\ninterface ISchemaRegistry is ISemver {\\n    /// @notice Emitted when a new schema has been registered\\n    /// @param uid The schema UID.\\n    /// @param registerer The address of the account used to register the schema.\\n    /// @param schema The schema data.\\n    event Registered(bytes32 indexed uid, address indexed registerer, SchemaRecord schema);\\n\\n    /// @notice Submits and reserves a new schema\\n    /// @param schema The schema data schema.\\n    /// @param resolver An optional schema resolver.\\n    /// @param revocable Whether the schema allows revocations explicitly.\\n    /// @return The UID of the new schema.\\n    function register(string calldata schema, ISchemaResolver resolver, bool revocable) external returns (bytes32);\\n\\n    /// @notice Returns an existing schema by UID\\n    /// @param uid The UID of the schema to retrieve.\\n    /// @return The schema data members.\\n    function getSchema(bytes32 uid) external view returns (SchemaRecord memory);\\n}\\n\",\"keccak256\":\"0xea97dcd36a0c422169cbaac06698249e199049b627c16bff93fb8ab829058754\",\"license\":\"MIT\"},\"@eas/contracts/ISemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/// @title ISemver\\n/// @notice A semver interface.\\ninterface ISemver {\\n    /// @notice Returns the full semver contract version.\\n    /// @return Semver contract version as a string.\\n    function version() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x04a67939b4e1a8d0a51101b8f69f8882930bbdc66319f38023828625b5d1ff18\",\"license\":\"MIT\"},\"@eas/contracts/resolver/ISchemaResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ISemver } from \\\"../ISemver.sol\\\";\\nimport { Attestation } from \\\"../Common.sol\\\";\\n\\n/// @title ISchemaResolver\\n/// @notice The interface of an optional schema resolver.\\ninterface ISchemaResolver is ISemver {\\n    /// @notice Checks if the resolver can be sent ETH.\\n    /// @return Whether the resolver supports ETH transfers.\\n    function isPayable() external pure returns (bool);\\n\\n    /// @notice Processes an attestation and verifies whether it's valid.\\n    /// @param attestation The new attestation.\\n    /// @return Whether the attestation is valid.\\n    function attest(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes multiple attestations and verifies whether they are valid.\\n    /// @param attestations The new attestations.\\n    /// @param values Explicit ETH amounts which were sent with each attestation.\\n    /// @return Whether all the attestations are valid.\\n    function multiAttest(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n\\n    /// @notice Processes an attestation revocation and verifies if it can be revoked.\\n    /// @param attestation The existing attestation to be revoked.\\n    /// @return Whether the attestation can be revoked.\\n    function revoke(Attestation calldata attestation) external payable returns (bool);\\n\\n    /// @notice Processes revocation of multiple attestation and verifies they can be revoked.\\n    /// @param attestations The existing attestations to be revoked.\\n    /// @param values Explicit ETH amounts which were sent with each revocation.\\n    /// @return Whether the attestations can be revoked.\\n    function multiRevoke(\\n        Attestation[] calldata attestations,\\n        uint256[] calldata values\\n    ) external payable returns (bool);\\n}\\n\",\"keccak256\":\"0x479f39f03425df5385d790cd2c7447b8250aeb9733d13029d3da8c5982b6604b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/badge/ScrollBadgeLevelsScrolly.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport { Attestation } from \\\"@eas/contracts/IEAS.sol\\\";\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { ScrollBadgeAccessControl } from\\n    \\\"@canva-contracts/badge/extensions/ScrollBadgeAccessControl.sol\\\";\\nimport { ScrollBadgeDefaultURI } from \\\"@canva-contracts/badge/extensions/ScrollBadgeDefaultURI.sol\\\";\\nimport { ScrollBadgeEligibilityCheck } from\\n    \\\"@canva-contracts/badge/extensions/ScrollBadgeEligibilityCheck.sol\\\";\\nimport { ScrollBadgeNoExpiry } from \\\"@canva-contracts/badge/extensions/ScrollBadgeNoExpiry.sol\\\";\\nimport { ScrollBadgeSingleton } from \\\"@canva-contracts/badge/extensions/ScrollBadgeSingleton.sol\\\";\\nimport { ScrollBadge } from \\\"@canva-contracts/badge/ScrollBadge.sol\\\";\\nimport { Unauthorized } from \\\"@canva-contracts/Errors.sol\\\";\\n\\nimport { IActivityPoints } from \\\"../interfaces/IActivityPoints.sol\\\";\\n\\nfunction decodePayloadData(bytes memory data) pure returns (uint8) {\\n    return abi.decode(data, (uint8));\\n}\\n\\n/**\\n * @title ScrollBadgeLevelsScrolly\\n * @author Alderian\\n * @notice A badge that represents the Scrolly user's level.\\n */\\ncontract ScrollBadgeLevelsScrolly is\\n    ScrollBadgeAccessControl,\\n    ScrollBadgeDefaultURI,\\n    ScrollBadgeEligibilityCheck,\\n    ScrollBadgeNoExpiry,\\n    ScrollBadgeSingleton\\n{\\n    uint256 public immutable MINIMUM_POINTS_ELIGIBILITY = 1 ether; // Scrolly Baby\\n    uint256 public immutable MINIMUM_POINTS_LEVEL_2 = 333 ether; // Scrolly Novice\\n    uint256 public immutable MINIMUM_POINTS_LEVEL_3 = 777 ether; // Scrolly Explorer\\n    uint256 public immutable MINIMUM_POINTS_LEVEL_4 = 1337 ether; // Master Mapper\\n    uint256 public immutable MINIMUM_POINTS_LEVEL_5 = 2442 ether; // Carto Maestro\\n    uint256 public immutable MINIMUM_POINTS_LEVEL_6 = 4200 ether; // Grand Cartographer of Scrolly\\n\\n    address private apAddress; // activity points contract address\\n    string public baseBadgeURI;\\n\\n    constructor(\\n        address resolver_,\\n        address activityPoints_,\\n        string memory _defaultBadgeURI, // IPFS, HTTP, or data URL\\n        string memory _baseBadgeURI // IPFS, HTTP, or data URL to add level to get image\\n    )\\n        ScrollBadge(resolver_)\\n        ScrollBadgeDefaultURI(_defaultBadgeURI)\\n    {\\n        apAddress = activityPoints_;\\n        baseBadgeURI = _baseBadgeURI;\\n    }\\n\\n    /// @inheritdoc ScrollBadge\\n    function onIssueBadge(Attestation calldata attestation)\\n        internal\\n        override(ScrollBadge, ScrollBadgeAccessControl, ScrollBadgeNoExpiry, ScrollBadgeSingleton)\\n        returns (bool)\\n    {\\n        if (!isEligible(attestation.recipient)) {\\n            revert Unauthorized();\\n        }\\n\\n        return super.onIssueBadge(attestation);\\n    }\\n\\n    /// @inheritdoc ScrollBadge\\n    function onRevokeBadge(Attestation calldata attestation)\\n        internal\\n        override(ScrollBadge, ScrollBadgeAccessControl, ScrollBadgeNoExpiry, ScrollBadgeSingleton)\\n        returns (bool)\\n    {\\n        return super.onRevokeBadge(attestation);\\n    }\\n\\n    /// @inheritdoc ScrollBadgeDefaultURI\\n    function getBadgeTokenURI(bytes32 uid) internal view override returns (string memory) {\\n        // We get current user level from latest attestation (using provided badge logic)\\n        uint8 level = getCurrentLevel(uid);\\n\\n        return string(abi.encode(baseBadgeURI, Strings.toString(level), \\\".json\\\"));\\n    }\\n\\n    function getCurrentLevel(bytes32 uid) public view returns (uint8) {\\n        Attestation memory badge = getAndValidateBadge(uid);\\n        return getLevel(badge.recipient);\\n    }\\n\\n    function isEligible(address recipient) public view override returns (bool) {\\n        return (IActivityPoints(apAddress).getPoints(recipient) >= MINIMUM_POINTS_ELIGIBILITY);\\n    }\\n\\n    function getPoints(address recipient) public view returns (uint256) {\\n        return IActivityPoints(apAddress).getPoints(recipient);\\n    }\\n\\n    function getLevel(address recipient) public view returns (uint8) {\\n        return determineBadgeLevel(IActivityPoints(apAddress).getPoints(recipient));\\n    }\\n\\n    function determineBadgeLevel(uint256 points) public pure returns (uint8) {\\n        if (points <= MINIMUM_POINTS_ELIGIBILITY) {\\n            return 0; // 0 - unrevealed - minimum not meet\\n        } else if (points < MINIMUM_POINTS_LEVEL_2) {\\n            return 1; // 1 - Scrolly Baby\\n        } else if (points < MINIMUM_POINTS_LEVEL_3) {\\n            return 2; // 2- Scrolly Novice\\n        } else if (points < MINIMUM_POINTS_LEVEL_4) {\\n            return 3; // 3 - Scrolly Explorer\\n        } else if (points < MINIMUM_POINTS_LEVEL_5) {\\n            return 4; // 4 - Master Mapper\\n        } else if (points < MINIMUM_POINTS_LEVEL_6) {\\n            return 5; // 5 - Carto Maestro\\n        } else {\\n            return 6; // 6 - Grand Cartographer of Scrolly\\n        }\\n    }\\n\\n    function setDefaultBadgeURI(string memory _defaultBadgeURI) external onlyOwner {\\n        defaultBadgeURI = _defaultBadgeURI;\\n    }\\n\\n    function setBaseBadgeURI(string memory _baseBadgeURI) external onlyOwner {\\n        baseBadgeURI = _baseBadgeURI;\\n    }\\n}\\n\",\"keccak256\":\"0x880e8866923223688274e1f2154ba00f3c76c44bf8c9c7e42a10e4bdd98a91f7\",\"license\":\"MIT\"},\"contracts/interfaces/IActivityPoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IActivityPoints {\\n    function getPoints(address user_) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb30872b066a8a0a949a7b0e26402fa5e314aec328780e721627e3f09130f705d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052670de0b6b3a764000060a05268120d4da7b0bd14000060c052682a1f0a87470e84000060e05268487a9a304539440000610100526884618ecdbabfe800006101205268e3aeb5737240a00000610140523480156200006257600080fd5b5060405162001c2e38038062001c2e833981016040819052620000859162000214565b81846200009233620000e2565b6001600160a01b03166080526003620000ac828262000333565b5050600480546001600160a01b0319166001600160a01b0385161790556005620000d7828262000333565b5050505050620003ff565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200014a57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200017757600080fd5b81516001600160401b03808211156200019457620001946200014f565b604051601f8301601f19908116603f01168101908282118183101715620001bf57620001bf6200014f565b81604052838152602092508683858801011115620001dc57600080fd5b600091505b83821015620002005785820183015181830184015290820190620001e1565b600093810190920192909252949350505050565b600080600080608085870312156200022b57600080fd5b620002368562000132565b9350620002466020860162000132565b60408601519093506001600160401b03808211156200026457600080fd5b620002728883890162000165565b935060608701519150808211156200028957600080fd5b50620002988782880162000165565b91505092959194509250565b600181811c90821680620002b957607f821691505b602082108103620002da57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032e57600081815260208120601f850160051c81016020861015620003095750805b601f850160051c820191505b818110156200032a5782815560010162000315565b5050505b505050565b81516001600160401b038111156200034f576200034f6200014f565b6200036781620003608454620002a4565b84620002e0565b602080601f8311600181146200039f5760008415620003865750858301515b600019600386901b1c1916600185901b1785556200032a565b600085815260208120601f198616915b82811015620003d057888601518255948401946001909101908401620003af565b5085821015620003ef5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a05160c05160e05161010051610120516101405161178e620004a0600039600081816102110152610b0c0152600081816104180152610adc0152600081816102810152610aac0152600081816102a80152610a7c0152600081816103cb0152610a4c0152600081816103a40152818161057e0152610a1d01526000818161019801528181610689015281816107c7015261094a015261178e6000f3fe608060405234801561001057600080fd5b506004361061018e5760003560e01c8063abe7f095116100de578063d753a63d11610097578063ee204abb11610071578063ee204abb1461043a578063eed05dce1461044d578063f22abab414610460578063f2fde38b1461046857600080fd5b8063d753a63d146103ed578063e7257d2214610400578063e81d23241461041357600080fd5b8063abe7f0951461034e578063b1a3a35f14610361578063b6ebe53914610369578063c16818981461038c578063ceb51c411461039f578063cfe3e6a0146103c657600080fd5b80636636114d1161014b578063817c896611610125578063817c8966146102e55780638298b0301461030a5780638c6f12f01461031d5780638da5cb5b1461033d57600080fd5b80636636114d146102a357806366e305fd146102ca578063715018a6146102dd57600080fd5b806304f3bcec146101935780630ee48948146101d757806324830563146101ec578063369db6aa1461020c5780635e50864f146102415780636538a7d91461027c575b600080fd5b6101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ea6101e536600461104b565b61047b565b005b6101ff6101fa366004611084565b6104ae565b6040516101ce91906110ed565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101ce565b61026c61024f366004611100565b6001600160a01b0316600090815260016020526040902054151590565b60405190151581526020016101ce565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b61026c6102d8366004611100565b610556565b6101ea6105f2565b6102f86102f3366004611100565b610606565b60405160ff90911681526020016101ce565b61026c61031836600461111d565b61067c565b61033061032b366004611084565b610758565b6040516101ce9190611158565b6000546001600160a01b03166101ba565b6101ea61035c3660046112c2565b610883565b6101ff61089b565b61026c610377366004611100565b60026020526000908152604090205460ff1681565b6101ea61039a3660046112c2565b610929565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b61026c6103fb36600461111d565b61093d565b6102f861040e366004611084565b610a19565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b610233610448366004611100565b610b47565b6102f861045b366004611084565b610bbb565b6101ff610bdd565b6101ea610476366004611100565b610bea565b610483610c63565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b60608161054757600380546104c290611341565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee90611341565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b50505050509050919050565b61055082610cbd565b92915050565b6004805460405163ee204abb60e01b81526001600160a01b03848116938201939093526000927f000000000000000000000000000000000000000000000000000000000000000092169063ee204abb90602401602060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea919061137b565b101592915050565b6105fa610c63565b6106046000610d02565b565b6004805460405163ee204abb60e01b81526001600160a01b038481169382019390935260009261055092169063ee204abb90602401602060405180830381865afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e919061137b565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c6576040516282b42960e81b815260040160405180910390fd5b6106cf82610d52565b6106db57506000919050565b60018060006106f060e0860160c08701611100565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461071f91906113aa565b90915550506040518235907f504e4727721de18c6bf7f66448a6ff6da00aa4b1f00b6034e71723ae7ce6373a90600090a2506001919050565b604080516101408101825260008082526020820181905281830181905260608083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083015291516308c6f12f60e41b8152600481018490529091906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638c6f12f090602401600060405180830381865afa15801561080e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108369190810190611438565b90506000610848826101200151610d5d565b5090506001600160a01b038116301461087c5760405163b923d26160e01b8152600481018590526024015b60405180910390fd5b5092915050565b61088b610c63565b6003610897828261157d565b5050565b600380546108a890611341565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490611341565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b505050505081565b610931610c63565b6005610897828261157d565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610987576040516282b42960e81b815260040160405180910390fd5b61099082610d7e565b61099c57506000919050565b60018060006109b160e0860160c08701611100565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109e0919061163c565b90915550506040518235907fa0785ec0b9bf31a5475d33c716fb9f500f0ea0bb9e4bc10ec39d5db763c1da1590600090a2506001919050565b60007f00000000000000000000000000000000000000000000000000000000000000008211610a4a57506000919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610a7a57506001919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610aaa57506002919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610ada57506003919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610b0a57506004919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610b3a57506005919050565b506006919050565b919050565b6004805460405163ee204abb60e01b81526001600160a01b03848116938201939093526000929091169063ee204abb90602401602060405180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610550919061137b565b600080610bc783610758565b9050610bd68160c00151610606565b9392505050565b600580546108a890611341565b610bf2610c63565b6001600160a01b038116610c575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610873565b610c6081610d02565b50565b6000546001600160a01b031633146106045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610873565b60606000610cca83610bbb565b90506005610cda8260ff16610db8565b604051602001610ceb92919061164f565b604051602081830303815290604052915050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061055082610e4a565b6000606082806020019051810190610d759190611714565b91509150915091565b6000610d936102d860e0840160c08501611100565b610daf576040516282b42960e81b815260040160405180910390fd5b61055082610e55565b60606000610dc583610ea5565b60010190506000816001600160401b03811115610de457610de461122c565b6040519080825280601f01601f191660200182016040528015610e0e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610e1857509392505050565b600061055082610f7d565b6000610e6082610f88565b610e6c57506000919050565b610e7f61024f60e0840160c08501611100565b15610e9d57604051630c59311960e11b815260040160405180910390fd5b506001919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ee45772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610f10576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610f2e57662386f26fc10000830492506010015b6305f5e1008310610f46576305f5e100830492506008015b6127108310610f5a57612710830492506004015b60648310610f6c576064830492506002015b600a83106105505760010192915050565b600061055082610fd8565b6000610f9382610fd8565b610f9f57506000919050565b6000610fb16080840160608501611764565b6001600160401b031614610e9d57604051637bfd865360e11b815260040160405180910390fd5b600060026000610fef610100850160e08601611100565b6001600160a01b0316815260208101919091526040016000205460ff16610e9d576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381168114610c6057600080fd5b8015158114610c6057600080fd5b6000806040838503121561105e57600080fd5b823561106981611028565b915060208301356110798161103d565b809150509250929050565b60006020828403121561109657600080fd5b5035919050565b60005b838110156110b85781810151838201526020016110a0565b50506000910152565b600081518084526110d981602086016020860161109d565b601f01601f19169290920160200192915050565b602081526000610bd660208301846110c1565b60006020828403121561111257600080fd5b8135610bd681611028565b60006020828403121561112f57600080fd5b81356001600160401b0381111561114557600080fd5b82016101408185031215610bd657600080fd5b6020815281516020820152602082015160408201526000604083015161118960608401826001600160401b03169052565b5060608301516001600160401b03811660808401525060808301516001600160401b03811660a08401525060a083015160c083015260c08301516111d860e08401826001600160a01b03169052565b5060e08301516101006111f5818501836001600160a01b03169052565b840151905061012061120a8482018315159052565b8401516101408481015290506112246101608401826110c1565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b03811182821017156112655761126561122c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156112935761129361122c565b604052919050565b60006001600160401b038211156112b4576112b461122c565b50601f01601f191660200190565b6000602082840312156112d457600080fd5b81356001600160401b038111156112ea57600080fd5b8201601f810184136112fb57600080fd5b803561130e6113098261129b565b61126b565b81815285602083850101111561132357600080fd5b81602084016020830137600091810160200191909152949350505050565b600181811c9082168061135557607f821691505b60208210810361137557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561138d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561055057610550611394565b6001600160401b0381168114610c6057600080fd5b8051610b42816113bd565b8051610b4281611028565b8051610b428161103d565b600082601f83011261140457600080fd5b81516114126113098261129b565b81815284602083860101111561142757600080fd5b61122482602083016020870161109d565b60006020828403121561144a57600080fd5b81516001600160401b038082111561146157600080fd5b90830190610140828603121561147657600080fd5b61147e611242565b8251815260208301516020820152611498604084016113d2565b60408201526114a9606084016113d2565b60608201526114ba608084016113d2565b608082015260a083015160a08201526114d560c084016113dd565b60c08201526114e660e084016113dd565b60e08201526101006114f98185016113e8565b90820152610120838101518381111561151157600080fd5b61151d888287016113f3565b918301919091525095945050505050565b601f82111561157857600081815260208120601f850160051c810160208610156115555750805b601f850160051c820191505b8181101561157457828155600101611561565b5050505b505050565b81516001600160401b038111156115965761159661122c565b6115aa816115a48454611341565b8461152e565b602080601f8311600181146115df57600084156115c75750858301515b600019600386901b1c1916600185901b178555611574565b600085815260208120601f198616915b8281101561160e578886015182559484019460019091019084016115ef565b508582101561162c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561055057610550611394565b60608152600080845461166181611341565b8060608601526080600180841660008114611683576001811461169d576116ce565b60ff1985168884015283151560051b8801830195506116ce565b8960005260208060002060005b868110156116c55781548b82018701529084019082016116aa565b8a018501975050505b505050505082810360208401526116e581856110c1565b9050828103604084015261170b816005815264173539b7b760d91b602082015260400190565b95945050505050565b6000806040838503121561172757600080fd5b825161173281611028565b60208401519092506001600160401b0381111561174e57600080fd5b61175a858286016113f3565b9150509250929050565b60006020828403121561177657600080fd5b8135610bd6816113bd56fea164736f6c6343000813000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061018e5760003560e01c8063abe7f095116100de578063d753a63d11610097578063ee204abb11610071578063ee204abb1461043a578063eed05dce1461044d578063f22abab414610460578063f2fde38b1461046857600080fd5b8063d753a63d146103ed578063e7257d2214610400578063e81d23241461041357600080fd5b8063abe7f0951461034e578063b1a3a35f14610361578063b6ebe53914610369578063c16818981461038c578063ceb51c411461039f578063cfe3e6a0146103c657600080fd5b80636636114d1161014b578063817c896611610125578063817c8966146102e55780638298b0301461030a5780638c6f12f01461031d5780638da5cb5b1461033d57600080fd5b80636636114d146102a357806366e305fd146102ca578063715018a6146102dd57600080fd5b806304f3bcec146101935780630ee48948146101d757806324830563146101ec578063369db6aa1461020c5780635e50864f146102415780636538a7d91461027c575b600080fd5b6101ba7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ea6101e536600461104b565b61047b565b005b6101ff6101fa366004611084565b6104ae565b6040516101ce91906110ed565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101ce565b61026c61024f366004611100565b6001600160a01b0316600090815260016020526040902054151590565b60405190151581526020016101ce565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b61026c6102d8366004611100565b610556565b6101ea6105f2565b6102f86102f3366004611100565b610606565b60405160ff90911681526020016101ce565b61026c61031836600461111d565b61067c565b61033061032b366004611084565b610758565b6040516101ce9190611158565b6000546001600160a01b03166101ba565b6101ea61035c3660046112c2565b610883565b6101ff61089b565b61026c610377366004611100565b60026020526000908152604090205460ff1681565b6101ea61039a3660046112c2565b610929565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b61026c6103fb36600461111d565b61093d565b6102f861040e366004611084565b610a19565b6102337f000000000000000000000000000000000000000000000000000000000000000081565b610233610448366004611100565b610b47565b6102f861045b366004611084565b610bbb565b6101ff610bdd565b6101ea610476366004611100565b610bea565b610483610c63565b6001600160a01b03919091166000908152600260205260409020805460ff1916911515919091179055565b60608161054757600380546104c290611341565b80601f01602080910402602001604051908101604052809291908181526020018280546104ee90611341565b801561053b5780601f106105105761010080835404028352916020019161053b565b820191906000526020600020905b81548152906001019060200180831161051e57829003601f168201915b50505050509050919050565b61055082610cbd565b92915050565b6004805460405163ee204abb60e01b81526001600160a01b03848116938201939093526000927f000000000000000000000000000000000000000000000000000000000000000092169063ee204abb90602401602060405180830381865afa1580156105c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ea919061137b565b101592915050565b6105fa610c63565b6106046000610d02565b565b6004805460405163ee204abb60e01b81526001600160a01b038481169382019390935260009261055092169063ee204abb90602401602060405180830381865afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040e919061137b565b6000336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146106c6576040516282b42960e81b815260040160405180910390fd5b6106cf82610d52565b6106db57506000919050565b60018060006106f060e0860160c08701611100565b6001600160a01b03166001600160a01b03168152602001908152602001600020600082825461071f91906113aa565b90915550506040518235907f504e4727721de18c6bf7f66448a6ff6da00aa4b1f00b6034e71723ae7ce6373a90600090a2506001919050565b604080516101408101825260008082526020820181905281830181905260608083018290526080830182905260a0830182905260c0830182905260e08301829052610100830182905261012083015291516308c6f12f60e41b8152600481018490529091906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690638c6f12f090602401600060405180830381865afa15801561080e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108369190810190611438565b90506000610848826101200151610d5d565b5090506001600160a01b038116301461087c5760405163b923d26160e01b8152600481018590526024015b60405180910390fd5b5092915050565b61088b610c63565b6003610897828261157d565b5050565b600380546108a890611341565b80601f01602080910402602001604051908101604052809291908181526020018280546108d490611341565b80156109215780601f106108f657610100808354040283529160200191610921565b820191906000526020600020905b81548152906001019060200180831161090457829003601f168201915b505050505081565b610931610c63565b6005610897828261157d565b6000336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610987576040516282b42960e81b815260040160405180910390fd5b61099082610d7e565b61099c57506000919050565b60018060006109b160e0860160c08701611100565b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546109e0919061163c565b90915550506040518235907fa0785ec0b9bf31a5475d33c716fb9f500f0ea0bb9e4bc10ec39d5db763c1da1590600090a2506001919050565b60007f00000000000000000000000000000000000000000000000000000000000000008211610a4a57506000919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610a7a57506001919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610aaa57506002919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610ada57506003919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610b0a57506004919050565b7f0000000000000000000000000000000000000000000000000000000000000000821015610b3a57506005919050565b506006919050565b919050565b6004805460405163ee204abb60e01b81526001600160a01b03848116938201939093526000929091169063ee204abb90602401602060405180830381865afa158015610b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610550919061137b565b600080610bc783610758565b9050610bd68160c00151610606565b9392505050565b600580546108a890611341565b610bf2610c63565b6001600160a01b038116610c575760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610873565b610c6081610d02565b50565b6000546001600160a01b031633146106045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610873565b60606000610cca83610bbb565b90506005610cda8260ff16610db8565b604051602001610ceb92919061164f565b604051602081830303815290604052915050919050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600061055082610e4a565b6000606082806020019051810190610d759190611714565b91509150915091565b6000610d936102d860e0840160c08501611100565b610daf576040516282b42960e81b815260040160405180910390fd5b61055082610e55565b60606000610dc583610ea5565b60010190506000816001600160401b03811115610de457610de461122c565b6040519080825280601f01601f191660200182016040528015610e0e576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610e1857509392505050565b600061055082610f7d565b6000610e6082610f88565b610e6c57506000919050565b610e7f61024f60e0840160c08501611100565b15610e9d57604051630c59311960e11b815260040160405180910390fd5b506001919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610ee45772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610f10576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610f2e57662386f26fc10000830492506010015b6305f5e1008310610f46576305f5e100830492506008015b6127108310610f5a57612710830492506004015b60648310610f6c576064830492506002015b600a83106105505760010192915050565b600061055082610fd8565b6000610f9382610fd8565b610f9f57506000919050565b6000610fb16080840160608501611764565b6001600160401b031614610e9d57604051637bfd865360e11b815260040160405180910390fd5b600060026000610fef610100850160e08601611100565b6001600160a01b0316815260208101919091526040016000205460ff16610e9d576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381168114610c6057600080fd5b8015158114610c6057600080fd5b6000806040838503121561105e57600080fd5b823561106981611028565b915060208301356110798161103d565b809150509250929050565b60006020828403121561109657600080fd5b5035919050565b60005b838110156110b85781810151838201526020016110a0565b50506000910152565b600081518084526110d981602086016020860161109d565b601f01601f19169290920160200192915050565b602081526000610bd660208301846110c1565b60006020828403121561111257600080fd5b8135610bd681611028565b60006020828403121561112f57600080fd5b81356001600160401b0381111561114557600080fd5b82016101408185031215610bd657600080fd5b6020815281516020820152602082015160408201526000604083015161118960608401826001600160401b03169052565b5060608301516001600160401b03811660808401525060808301516001600160401b03811660a08401525060a083015160c083015260c08301516111d860e08401826001600160a01b03169052565b5060e08301516101006111f5818501836001600160a01b03169052565b840151905061012061120a8482018315159052565b8401516101408481015290506112246101608401826110c1565b949350505050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b03811182821017156112655761126561122c565b60405290565b604051601f8201601f191681016001600160401b03811182821017156112935761129361122c565b604052919050565b60006001600160401b038211156112b4576112b461122c565b50601f01601f191660200190565b6000602082840312156112d457600080fd5b81356001600160401b038111156112ea57600080fd5b8201601f810184136112fb57600080fd5b803561130e6113098261129b565b61126b565b81815285602083850101111561132357600080fd5b81602084016020830137600091810160200191909152949350505050565b600181811c9082168061135557607f821691505b60208210810361137557634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561138d57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561055057610550611394565b6001600160401b0381168114610c6057600080fd5b8051610b42816113bd565b8051610b4281611028565b8051610b428161103d565b600082601f83011261140457600080fd5b81516114126113098261129b565b81815284602083860101111561142757600080fd5b61122482602083016020870161109d565b60006020828403121561144a57600080fd5b81516001600160401b038082111561146157600080fd5b90830190610140828603121561147657600080fd5b61147e611242565b8251815260208301516020820152611498604084016113d2565b60408201526114a9606084016113d2565b60608201526114ba608084016113d2565b608082015260a083015160a08201526114d560c084016113dd565b60c08201526114e660e084016113dd565b60e08201526101006114f98185016113e8565b90820152610120838101518381111561151157600080fd5b61151d888287016113f3565b918301919091525095945050505050565b601f82111561157857600081815260208120601f850160051c810160208610156115555750805b601f850160051c820191505b8181101561157457828155600101611561565b5050505b505050565b81516001600160401b038111156115965761159661122c565b6115aa816115a48454611341565b8461152e565b602080601f8311600181146115df57600084156115c75750858301515b600019600386901b1c1916600185901b178555611574565b600085815260208120601f198616915b8281101561160e578886015182559484019460019091019084016115ef565b508582101561162c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8082018082111561055057610550611394565b60608152600080845461166181611341565b8060608601526080600180841660008114611683576001811461169d576116ce565b60ff1985168884015283151560051b8801830195506116ce565b8960005260208060002060005b868110156116c55781548b82018701529084019082016116aa565b8a018501975050505b505050505082810360208401526116e581856110c1565b9050828103604084015261170b816005815264173539b7b760d91b602082015260400190565b95945050505050565b6000806040838503121561172757600080fd5b825161173281611028565b60208401519092506001600160401b0381111561174e57600080fd5b61175a858286016113f3565b9150509250929050565b60006020828403121561177657600080fd5b8135610bd6816113bd56fea164736f6c6343000813000a",
  "devdoc": {
    "author": "Alderian",
    "kind": "dev",
    "methods": {
      "badgeTokenURI(bytes32)": {
        "params": {
          "uid": "The badge UID, or 0x0."
        },
        "returns": {
          "_0": "The badge token URI (same format as ERC721)."
        }
      },
      "getAndValidateBadge(bytes32)": {
        "params": {
          "uid": "The attestation UID."
        },
        "returns": {
          "_0": "The attestation."
        }
      },
      "hasBadge(address)": {
        "params": {
          "user": "The user's wallet address."
        },
        "returns": {
          "_0": "True if the user has one or more of this badge."
        }
      },
      "isEligible(address)": {
        "params": {
          "recipient": "The user's wallet address."
        },
        "returns": {
          "_0": "Whether the user is eligible to mint."
        }
      },
      "issueBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The new attestation."
        },
        "returns": {
          "_0": "Whether the attestation is valid."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "revokeBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "params": {
          "attestation": "The new attestation."
        },
        "returns": {
          "_0": "Whether the attestation can be revoked."
        }
      },
      "toggleAttester(address,bool)": {
        "params": {
          "attester": "The attester address.",
          "enable": "True if enable, false if disable."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ScrollBadgeLevelsScrolly",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "badgeTokenURI(bytes32)": {
        "notice": "Returns the token URI corresponding to a certain badge UID, or the default         badge token URI if the pass UID is 0x0."
      },
      "getAndValidateBadge(bytes32)": {
        "notice": "Validate and return a Scroll badge attestation."
      },
      "hasBadge(address)": {
        "notice": "Returns true if the user has one or more of this badge."
      },
      "isEligible(address)": {
        "notice": "Check if user is eligible to mint this badge."
      },
      "issueBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "A resolver callback invoked in the `issueBadge` function in the parent contract."
      },
      "revokeBadge((bytes32,bytes32,uint64,uint64,uint64,bytes32,address,address,bool,bytes))": {
        "notice": "A resolver callback invoked in the `revokeBadge` function in the parent contract."
      },
      "toggleAttester(address,bool)": {
        "notice": "Enables or disables a given attester."
      }
    },
    "notice": "A badge that represents the Scrolly user's level.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2123,
        "contract": "contracts/badge/ScrollBadgeLevelsScrolly.sol:ScrollBadgeLevelsScrolly",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 125,
        "contract": "contracts/badge/ScrollBadgeLevelsScrolly.sol:ScrollBadgeLevelsScrolly",
        "label": "_userBadgeCount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 332,
        "contract": "contracts/badge/ScrollBadgeLevelsScrolly.sol:ScrollBadgeLevelsScrolly",
        "label": "isAttester",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 423,
        "contract": "contracts/badge/ScrollBadgeLevelsScrolly.sol:ScrollBadgeLevelsScrolly",
        "label": "defaultBadgeURI",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 4540,
        "contract": "contracts/badge/ScrollBadgeLevelsScrolly.sol:ScrollBadgeLevelsScrolly",
        "label": "apAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4542,
        "contract": "contracts/badge/ScrollBadgeLevelsScrolly.sol:ScrollBadgeLevelsScrolly",
        "label": "baseBadgeURI",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}